{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"JavaSE/数组","date":"2022-07-02T12:24:10.000Z","updated":"2022-07-11T07:50:26.162Z","comments":true,"path":"api/articles/JavaSE/数组.json","keywords":"Java study learn 学习","cover":[],"content":"<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"A-声明数组\"><a href=\"#A-声明数组\" class=\"headerlink\" title=\"A.声明数组\"></a>A.声明数组</h2><p>首先必须声明数组变量，才能在程序中使用数组。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayRefVar;   &#x2F;&#x2F; 首选的方法\n\n或\n\ndataType arrayRefVar[];  &#x2F;&#x2F; 效果相同，但不是首选方法</code></pre>\n\n<h2 id=\"B-创建数组\"><a href=\"#B-创建数组\" class=\"headerlink\" title=\"B.创建数组\"></a>B.创建数组</h2><p>Java 语言使用 new操作符来创建数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">arrayRefVar &#x3D; new dataType[arraySize];</code></pre>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayRefVar &#x3D; new dataType[arraySize];</code></pre>\n\n<p>另外，还可以使用如下的方式创建数组。</p>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">dataType[] arrayRefVar &#x3D; &#123;value0, value1, ..., valuek&#125;;</code></pre>\n\n<p>数组的元素是通过索引访问的。数组索引从0开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p>那么当数组开辟空间之后，就可以采用如下的方式的操作：</p>\n<ul>\n<li>数组的访问通过索引完成，即：“数组名称[索引]”，但是需要注意的是，数组的索引从0开始，所以索引的范围就是0 ~ 数组长度-1，例如开辟了3个空间的数组，所以可以使用的索引是：0,1,2，如果此时访问的时候超过了数组的索引范围，会产生 java.lang.ArrayIndexOutOfBoundsException 异常信息；</li>\n<li>当我们数组采用动态初始化开辟空间后，数组里面的每一个元素都是该数组对应数据类型的默认值；</li>\n<li>数组本身是一个有序的集合操作，所以对于数组的内容操作往往会采用循环的模式完成，数组是一个有限的数据集合，所以应该使用 for 循环。</li>\n<li>在 Java 中提供有一种动态取得数组长度的方式：数组名称.length；</li>\n</ul>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">数组属于引用数据类型，所以在数组使用之前一定要开辟空间（实例化），如果使用了没有开辟空间的数组，则一定会出现 NullPointerException 异常信息：</code></pre>\n\n<p><img src=\"/post/2022/07/%E6%95%B0%E7%BB%84/tu01.png\"></p>\n<h2 id=\"C-Arrays类\"><a href=\"#C-Arrays类\" class=\"headerlink\" title=\"C.Arrays类\"></a>C.Arrays类</h2><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">方法和说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><strong>public static int binarySearch(Object[] a, Object key)</strong><br/>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><strong>public static boolean equals(long[] a, long[] a2)</strong><br/>如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><strong>public static void fill(int[] a, int val)</strong><br/>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n</tbody></table>\n","text":"数组A.声明数组首先必须声明数组变量，才能在程序中使用数组。 dataType[] arrayRefVar; &#x2F;&#x2F; 首选的方法 或 dataType arrayRefVar[]; &#x2F;&#x2F; 效果相同，但不是首选方法 B.创建数组Java 语言使...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":8,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"基础","slug":"基础","count":3,"path":"api/tags/基础.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">A.声明数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">B.创建数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-Arrays%E7%B1%BB\"><span class=\"toc-text\">C.Arrays类</span></a></li></ol></li></ol>","author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}},"mapped":true,"prev_post":{"title":"day01-登录、登出、修改密码","uid":"2595e55bf451ea24b0a50ca7cbf81584","slug":"springboot-vue-wx-project/day01-登录、登出、修改密码","date":"2022-07-05T11:17:26.000Z","updated":"2022-07-11T07:51:25.142Z","comments":true,"path":"api/articles/springboot-vue-wx-project/day01-登录、登出、修改密码.json","keywords":"Java study learn 学习","cover":null,"text":"开发日记day01 环境：JDK15、SpringBoot、Vue、Redis、MySQL、RabbitMQ、MongoDB 数据库数据加密用到了 HEX(AES_ENCRYPT()) HEX():将一个字符串转换为十六进制格式的字符串 UNHEX():将十六进制格式的字符串转化...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"Java","slug":"Java","count":5,"path":"api/categories/Java.json"},{"name":"Vue","slug":"Java/Vue","count":4,"path":"api/categories/Java/Vue.json"}],"tags":[{"name":"springboot","slug":"springboot","count":4,"path":"api/tags/springboot.json"},{"name":"vue","slug":"vue","count":4,"path":"api/tags/vue.json"},{"name":"wx","slug":"wx","count":4,"path":"api/tags/wx.json"}],"author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}}},"next_post":{"title":"OOP面向对象","uid":"a8b9f6886e1afb1f46e24c344f2e7621","slug":"JavaSE/OOP面向对象","date":"2022-07-02T12:18:54.000Z","updated":"2022-07-11T07:51:06.310Z","comments":true,"path":"api/articles/JavaSE/OOP面向对象.json","keywords":"Java study learn 学习","cover":null,"text":"面向对象A.基本概念 面向对象思想将客观世界中的事物描述为对象，并通过抽象思维方法将需要解决的实际问题分解成人们易于理解的对象模型，然后通过这些对象模型来构建应用程序的功能 面向对象的一些概念 类、对象、继承、封装、多态等 Object Oriented Programming ...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":8,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"基础","slug":"基础","count":3,"path":"api/tags/基础.json"},{"name":"OOP","slug":"OOP","count":1,"path":"api/tags/OOP.json"}],"author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}}}}