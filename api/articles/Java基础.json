{"title":"Java基础","uid":"3316961ecf1671c6065b043220187c47","slug":"Java基础","date":"2022-06-23T12:43:18.000Z","updated":"2022-06-23T13:26:11.085Z","comments":true,"path":"api/articles/Java基础.json","keywords":null,"cover":[],"content":"<p>JavaSE基础</p>\n<span id=\"more\"></span>\n\n<h1 id=\"一：Java入门\"><a href=\"#一：Java入门\" class=\"headerlink\" title=\"一：Java入门\"></a>一：Java入门</h1><h2 id=\"A-安装eclipse\"><a href=\"#A-安装eclipse\" class=\"headerlink\" title=\"A.安装eclipse\"></a>A.安装eclipse</h2><p>目前市面上常用的集成开发环境(IDE)有：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.eclipse 免费 官网推荐 解压版</p>\n<p>2.myeclipse 插件版，可以生成很多功能，付费，现在用的几乎很少</p>\n<p>3.IntelliJ IDEA 智能提示很强大，付费</p></blockquote>\n<p>目前市面上eclipse2020和intelliJ IDEA 市场占有率各占一半，前期学习用eclipse，后期框架用IntelliJ IDEA</p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu1.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu2.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu3.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu4.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu5.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu6.png\"></p>\n<p>安装完毕！！！</p>\n<h2 id=\"B-安装jdk\"><a href=\"#B-安装jdk\" class=\"headerlink\" title=\"B.安装jdk\"></a>B.安装jdk</h2><h3 id=\"1-jdk、jre、jvm的区别：\"><a href=\"#1-jdk、jre、jvm的区别：\" class=\"headerlink\" title=\"1.jdk、jre、jvm的区别：\"></a>1.jdk、jre、jvm的区别：</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>jDK：Java Development kit java开发工具包，它提供了几千个类库的源码给我们，我们基于jdk提 供的开发环境去开发我们的代码，目前我们用的jdk1.8就是我们说的java8。</p>\n<p>JRE: java runtime Environment java运行环境，如果你需要将java程序运行你就必须安装加热， 如果你开发好了代码只需要运行那么只安装jre是可以的，但是通常jdk和jre都装</p>\n<p>JVM：java virtual Machine java虚拟机，负责解释运行字节码文件，是跨平台的核心。</p></blockquote>\n<h3 id=\"2-去官网去下载JDK\"><a href=\"#2-去官网去下载JDK\" class=\"headerlink\" title=\"2.去官网去下载JDK\"></a>2.去官网去下载JDK</h3><p><img src=\"/day01/tu7.png\"></p>\n<p><img src=\"/day01/tu8.png\"></p>\n<p><img src=\"/day01/tu9.png\"></p>\n<p><img src=\"/day01/tu10.png\"></p>\n<p><img src=\"/day01/tu11.png\"></p>\n<p><img src=\"/day01/tu12.png\"></p>\n<p>如果没有登录，就登陆或者注册，就可以下载了！！</p>\n<p><img src=\"/day01/tu13.png\"></p>\n<h3 id=\"3-安装jdk\"><a href=\"#3-安装jdk\" class=\"headerlink\" title=\"3.安装jdk\"></a>3.安装jdk</h3><p>注意：安装jdk的路径不能有中文或空格，以免出现问题！</p>\n<p><img src=\"/day01/tu14.png\"></p>\n<p><img src=\"/day01/tu15.png\"></p>\n<p><img src=\"/day01/tu16.png\"></p>\n<p><img src=\"/day01/tu17.png\"></p>\n<h3 id=\"4-配置环境变量\"><a href=\"#4-配置环境变量\" class=\"headerlink\" title=\"4.配置环境变量\"></a>4.配置环境变量</h3><p>为什么需要配置环境变量：</p>\n<p> 我们需要通过D:\\java8\\jdk\\bin目录下的javac.exe、java.exe的命令来编译执行java程序，但是我们不会 将源文件放到D:\\java8\\jdk\\bin目录下去，我们一般是将项目放在其他位置，但是要在磁盘的别的位置运 行java.exe命令就找不到，就需需要配置path环境变量告诉windows，如果在该目录找不到java.exe就 去path目录去找java.exe</p>\n<p><img src=\"/day01/tu18.png\"></p>\n<p><img src=\"/day01/tu19.png\"></p>\n<p><img src=\"/day01/tu20.png\"></p>\n<h2 id=\"C-开发项目\"><a href=\"#C-开发项目\" class=\"headerlink\" title=\"C.开发项目\"></a>C.开发项目</h2><p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu21.png\"></p>\n<p>项目目录：</p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu22.png\"></p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu23.png\"></p>\n<h2 id=\"D-更改字体大小\"><a href=\"#D-更改字体大小\" class=\"headerlink\" title=\"D.更改字体大小\"></a>D.更改字体大小</h2><p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day01/tu24.png\"></p>\n<h2 id=\"E-开发程序的3个步骤\"><a href=\"#E-开发程序的3个步骤\" class=\"headerlink\" title=\"E.开发程序的3个步骤\"></a>E.开发程序的3个步骤</h2><p>1.编写源文件，编写XXX.java源文件 </p>\n<p>2.编译，将XXX.java源文件翻译成XXX.class字节码文件 </p>\n<p>3.运行，在JVMjava虚拟机运行</p>\n<h2 id=\"F-注释\"><a href=\"#F-注释\" class=\"headerlink\" title=\"F.注释\"></a>F.注释</h2><h3 id=\"1-注释的作用\"><a href=\"#1-注释的作用\" class=\"headerlink\" title=\"1.注释的作用\"></a>1.注释的作用</h3><p>通常我们的项目在后期代码量越来越多，为了方便自己或者同事能够看懂你的代码，就需要添加注释对 代码进行说明解释，减少沟通成本。 </p>\n<p>注释后的代码不会被编译运行，因此还可以将作废但是需要保留的代码注释掉保留在文本中。</p>\n<h3 id=\"2-注释分类\"><a href=\"#2-注释分类\" class=\"headerlink\" title=\"2.注释分类\"></a>2.注释分类</h3><p>a.单行注释 </p>\n<p>b.多行注释 </p>\n<p>c.文档注释</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">package day01;\n&#x2F;**\n * \n * @author 南鸢离梦\n *\n *&#x2F;\npublic class Test1 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tSystem.out.println(&quot;Hello world!!&quot;);\n\t\tSystem.out.println(&quot;我是谁？&quot;);\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"G-转义字符\"><a href=\"#G-转义字符\" class=\"headerlink\" title=\"G.转义字符\"></a>G.转义字符</h2><p>\\n用来换行，\\t用来空格。</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">System.out.print(&quot;\\n高新区是个\\n美丽的地方&quot;)</code></pre>\n\n\n\n<h1 id=\"二：变量\"><a href=\"#二：变量\" class=\"headerlink\" title=\"二：变量\"></a>二：变量</h1><h2 id=\"A-定义\"><a href=\"#A-定义\" class=\"headerlink\" title=\"A.定义\"></a>A.定义</h2><p>存储在内存中的值并且能够发生改变，数据需要放在内存中才可以进行计算。变量本质是计算机内存中代表一个”可操作的存储空间“，位置是确定的，但里面的值是不确定的可以改变。通过变量名来访问该对应的存储的内存空间里面的值（变量名存储的是这个数据存在内存的地址）从而操作这个内存存储的值。</p>\n<p>存储在内存里面的数据是瞬时状态的（关机之后就没有了），保存在磁盘的是持久状态的。</p>\n<p>由于计算机内存有限，一般为4G或8G，需要尽可能的节省内存空间，就需要通过变量来存储以达到节省内存空间的目的。</p>\n<p>【字节】</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">字节是内存中最小的存储单位，一个字节byte由8位组成，8个bit，比如6转换成二进制 0000 0110</code></pre>\n\n<h2 id=\"B-数据类型\"><a href=\"#B-数据类型\" class=\"headerlink\" title=\"B.数据类型\"></a>B.数据类型</h2><p>java是一个强类型语言，每个变量必须声明数据类型，变量的数据类型决定了变量占据的存储空间的大小！通俗讲就是你要根据数据的大小依据数据类型为这个变量开辟合适大小的空间去存储，达到节约空间的目的</p>\n<p>比如:int a&#x3D;10;表示变量a存储空间的大小是4个字节，也就是说int在内存中开辟了4个字节的空间</p>\n<p>​    \t\t\t&#x3D;&#x3D;数据类型分为基本类型和引用类型&#x3D;&#x3D;</p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day02/tu1.png\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * \n * 变量，存储在内存中的数据，并且可以发生改变\n *\n *&#x2F;\npublic class Test1 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\t&#x2F;&#x2F;需求：需要将10存储在计算机内存中运算\n\t\t&#x2F;&#x2F;1、声明变量：依据数据的大小，根据数据类型开辟合适大小的空间 int 是4个字节存储整数\n\t\tint a;\t\t\n\t\t&#x2F;&#x2F;2、赋值：把左边的10通过&#x3D;赋给右边\n\t\ta&#x3D;10;\t\t\t\n\t\t&#x2F;&#x2F;3、使用变量：使用变量里面的值进行计算\n\t\ta&#x3D;a+5;\n\t\tSystem.out.println(a);\n\t\t\n\t\t&#x2F;&#x2F;声明并赋值进行初始化\n\t\tint b&#x3D;20;\n\t\t\n\t\tint c&#x3D;a+b;\n\t\tSystem.out.println(&quot;a+b的和：&quot;+c);\n\t&#125;\n&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test2 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\t&#x2F;&#x2F;存储整数，byte short int long\n\t\tbyte num1 &#x3D; 127;&#x2F;&#x2F;1个字节 -128~127之间\n\t\tshort num2 &#x3D; 126;&#x2F;&#x2F;2个字节 \n\t\tint age &#x3D; 27; &#x2F;&#x2F;4个字节，java默认int类型\n\t\tlong money &#x3D; 23232323232L;&#x2F;&#x2F; 8个字节存储空间 长整型\n\t\t\n\t\tchar sex &#x3D; &#39;s&#39;;&#x2F;&#x2F;字符类型 2个字节\n\t\t\n\t\t&#x2F;&#x2F;浮点类型\n\t\t&#x2F;&#x2F;浮点类型不是一个准确的数！float精确到第七位。double精确度是float的两倍所以叫双精度类型\n\t\tfloat fenshu1 &#x3D; 98.7F;&#x2F;&#x2F;单精度类型 4个字节\n\t\tdouble fenshu2 &#x3D; 93.22;&#x2F;&#x2F;双精度类型 8个字节 Java默认是double\n\t\t\n\t\t&#x2F;&#x2F;布尔类型，只能存放true&#x2F;false\n\t\tboolean hege &#x3D; false;&#x2F;&#x2F;1个bit(1个bit至少也要1byte存储)\n\t\t\n\t\t&#x2F;&#x2F;字符串类型，注意：字符串不是基本类型！它是特殊的引用类型\n\t\tString sexs &#x3D; &quot;male&quot;;\n\t\tString name2 &#x3D; &quot;&quot;; &#x2F;&#x2F;它也是字符串！空字符串\n\t&#125;\n&#125;</code></pre>\n\n<p>数据类型的存储范围：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">数据类型</th>\n<th align=\"center\">关键字</th>\n<th align=\"center\">占用字节</th>\n<th align=\"center\">取值范围</th>\n<th align=\"center\">默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">布尔型</td>\n<td align=\"center\">boolean</td>\n<td align=\"center\">1</td>\n<td align=\"center\">true，false</td>\n<td align=\"center\">false</td>\n</tr>\n<tr>\n<td align=\"center\">字节型</td>\n<td align=\"center\">byte</td>\n<td align=\"center\">1</td>\n<td align=\"center\">-128 ~ 127</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">短整型</td>\n<td align=\"center\">short</td>\n<td align=\"center\">2</td>\n<td align=\"center\">-2^15^ ~ 2^15^-1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">整型</td>\n<td align=\"center\">int</td>\n<td align=\"center\">4</td>\n<td align=\"center\">-2^31^ ~ 2^31^-1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">长整型</td>\n<td align=\"center\">long</td>\n<td align=\"center\">8</td>\n<td align=\"center\">-2^63^ ~ 2^63^-1</td>\n<td align=\"center\">0</td>\n</tr>\n<tr>\n<td align=\"center\">字符型</td>\n<td align=\"center\">char</td>\n<td align=\"center\">2</td>\n<td align=\"center\">0 ~ 2^16^-1</td>\n<td align=\"center\">‘\\u0000’</td>\n</tr>\n</tbody></table>\n<h2 id=\"C-变量命名规则\"><a href=\"#C-变量命名规则\" class=\"headerlink\" title=\"C.变量命名规则\"></a>C.变量命名规则</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.首字母可以以下划线、英文字母、$符号开头，其他部分可以是数字、字母、下划线、$符号；比如_name age age2 $name</p>\n<p>2.如果以两个单词组成的，以驼峰命名法命名，比如myName</p>\n<p>3.变量名最好有意义，不要写abc，方便别人看懂你的代码</p>\n<p>4.不要有关键字，比如int  public等</p></blockquote>\n<h2 id=\"D-变量种类\"><a href=\"#D-变量种类\" class=\"headerlink\" title=\"D.变量种类\"></a>D.变量种类</h2><h3 id=\"1-局部变量\"><a href=\"#1-局部变量\" class=\"headerlink\" title=\"1.局部变量\"></a>1.局部变量</h3><p>在方法或者语句块内部定义的变量，叫做局部变量，生命周期从声明的位置到方法或者语句块执行完毕就会被销毁。</p>\n<p>局部变量必须先声明复制才能使用</p>\n<h3 id=\"2-全局变量\"><a href=\"#2-全局变量\" class=\"headerlink\" title=\"2.全局变量\"></a>2.全局变量</h3><p>也叫成员变量或者叫实例变量，在类里面或者方法外面定义的变量叫全局变量，作用域整个类中，从属于对象，</p>\n<p>生命周期伴随着对象始终，如果不自动初始化，它会自动初始化该变量</p>\n<h3 id=\"3-静态变量\"><a href=\"#3-静态变量\" class=\"headerlink\" title=\"3.静态变量\"></a>3.静态变量</h3><p>也叫类变量，用static修饰，从属于类，在类加载的时候就会被初始化，生命周期从类加载到类卸载</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">static int c ;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * \n * 全局变量和局部变量的区别\n *\n *&#x2F;\npublic class Test3 &#123;\n\tint a&#x3D;10;\t&#x2F;&#x2F;全局变量，作用于整个类中\n\tint b;\n\tstatic name;\n\tstatic int c ;\n\t\n\tpublic static void main(String[] args) &#123;\n\t\tint b&#x3D;10; &#x2F;&#x2F;在方法内部或代码块定义的是局部变量。只作用于main方法里面\n\t\tint a&#x3D;15;  &#x2F;&#x2F;局部变量和全局变量可以重名\n\t\t\n\t\tSystem.out.println(&quot;局部变量b：&quot;+b);\n\t\t&#x2F;&#x2F;当局部变量和全局变量重名的情况下，就近原则，使用局部变量\n\t\tSystem.out.println(&quot;局部变量a：&quot;+a);\n\t\tTest3 test &#x3D; new Test3();\n\t\tSystem.out.println(&quot;全局变量a：&quot;+test.a);\n\t\t\n\t\tSystem.out.println(&quot;静态方法直接调用静态变量：&quot;+c);\n\t\tSystem.out.println(&quot;静态变量可以通过类名调用&quot;+test.c);\n\t\t&#x2F;&#x2F;由于全局变量是对象调用的引用类型，在堆内存中每月初始值\n\t\tSystem.out.println(test.name);\n\t\tSystem.out.println(test.d);\n\t&#125;\n\t&#x2F;&#x2F;@SuppressWarnings(&quot;unused&quot;)\n\tprivate void show() &#123;\n\t\t&#x2F;&#x2F;System.out.println(&quot;全局变量a：&quot;+a);\n\t\t&#x2F;&#x2F;在这调用不到main方法的局部变量b\n\t\t&#x2F;&#x2F;System.out.println(&quot;局部变量b：&quot;+b);\n\t\tSystem.out.println(&quot;静态变量可以通过类名调用&quot;+test.c);\t\n\t&#125;\n&#125;</code></pre>\n\n<p>​\t</p>\n<p>​\t &#x3D;&#x3D;基本数据类型的数据都是在栈内存中存储，引用类型的数据都是在对内存中存储&#x3D;&#x3D;</p>\n<h2 id=\"E-数据转换\"><a href=\"#E-数据转换\" class=\"headerlink\" title=\"E.数据转换\"></a>E.数据转换</h2><p>&#x3D;&#x3D;一定是数值之间才可以进行转换!&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a&#x3D;10;\ndouble b&#x3D;9.8;\nint c&#x3D;(int) b; &#x2F;&#x2F;由于大的空间的值不能放到小的空间，需要强制类型转换，但会丢失精度\nSystem.out.println(c);&#x2F;&#x2F;9\ndouble d&#x3D;a;&#x2F;&#x2F;把小的空间的值放到更大的空间，能放下，叫自动转换\nSystem.out.println(d);&#x2F;&#x2F;10.0\n\n&#x2F;&#x2F;扩展：任何数据+&quot;&quot;都变成字符串类型，不能再运算\nString str&#x3D;123+&quot;&quot;;</code></pre>\n\n<h2 id=\"F-控制台输入\"><a href=\"#F-控制台输入\" class=\"headerlink\" title=\"F.控制台输入\"></a>F.控制台输入</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Test5 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\ttry (&#x2F;&#x2F;创建input对象\n\t\tScanner input &#x3D; new Scanner(System.in)) &#123;\n\t\t\tSystem.out.print(&quot;请输入姓名：&quot;);\n\t\t\tString name&#x3D;input.next();&#x2F;&#x2F;next()输入字符串\n\t\t\tSystem.out.print(&quot;请输入年龄：&quot;);\n\t\t\tint age&#x3D;input.nextInt();&#x2F;&#x2F;nextInt()输入整数\n\t\t\t\n\t\t\tSystem.out.println(&quot;我的名字是&quot;+name+&quot;，我的年龄是&quot;+age+&quot;岁！&quot;);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"G-运算符\"><a href=\"#G-运算符\" class=\"headerlink\" title=\"G.运算符\"></a>G.运算符</h2><h3 id=\"a-算术运算符\"><a href=\"#a-算术运算符\" class=\"headerlink\" title=\"a.算术运算符\"></a>a.算术运算符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">+ - * &#x2F; %</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a&#x3D;7;\nint b&#x3D;3;\n\nint r1&#x3D;a+b;&#x2F;&#x2F;10\nint r2&#x3D;a-b;&#x2F;&#x2F;4\nint r3&#x3D;a*b;&#x2F;&#x2F;21\nint r4&#x3D;7&#x2F;3;&#x2F;&#x2F;2\ndouble r5&#x3D;7&#x2F;3.0;&#x2F;&#x2F;2.3333333333333335\nSystem.out.println(r4);\nSystem.out.println(r5);\n&#x2F;&#x2F;取余\nint r6&#x3D;7%3;&#x2F;&#x2F;1</code></pre>\n\n\n\n<h3 id=\"b-条件运算符\"><a href=\"#b-条件运算符\" class=\"headerlink\" title=\"b.条件运算符\"></a>b.条件运算符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">  a&gt;b\n  a&lt;b\n  a&gt;&#x3D;b\n  a&lt;&#x3D;b\n  a&#x3D;&#x3D;b\t两个值比较\n  a!&#x3D;b\t不等于\n  得到的结果是Boolean类型，结果为true&#x2F;false\n      int a&#x3D;3;\nint b&#x3D;7;\n\nboolean r1&#x3D;a&#x3D;&#x3D;b;&#x2F;&#x2F;false\nboolean r2&#x3D;a!&#x3D;b;&#x2F;&#x2F;true\nboolean r3&#x3D;a&gt;b;&#x2F;&#x2F;true\nSystem.out.println(r1);\nSystem.out.println(r2);\n      </code></pre>\n\n\n\n<h3 id=\"c-逻辑运算符\"><a href=\"#c-逻辑运算符\" class=\"headerlink\" title=\"c.逻辑运算符\"></a>c.逻辑运算符</h3><p>与或非</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>&amp;&amp;   \t并且：条件A&amp;&amp;条件B   条件A和条件B都满足为true，才会返回true</p>\n<p>||  \t  或者：条件A||条件B\t条件A和条件B其中一个满足为true，返回结果为true</p>\n<p>！         非：取反      ！&#x3D;不等于  ！true返回false</p></blockquote>\n<h4 id=\"面试题：-amp-和-amp-amp-的区别？\"><a href=\"#面试题：-amp-和-amp-amp-的区别？\" class=\"headerlink\" title=\"面试题：&amp;和&amp;&amp;的区别？\"></a>面试题：&amp;和&amp;&amp;的区别？</h4><p>​\t\t\t\t&amp;&amp;具有短路功能，效率更高。</p>\n<h3 id=\"d-赋值运算符\"><a href=\"#d-赋值运算符\" class=\"headerlink\" title=\"d.赋值运算符\"></a>d.赋值运算符</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x3D;\n   int a&#x3D;10;</code></pre>\n\n<h4 id=\"面试题：-x3D-x3D-和-x3D-的区别？\"><a href=\"#面试题：-x3D-x3D-和-x3D-的区别？\" class=\"headerlink\" title=\"面试题：&#x3D;&#x3D;和&#x3D;的区别？\"></a>面试题：&#x3D;&#x3D;和&#x3D;的区别？</h4><p>&#x3D;&#x3D;为比较，&#x3D;为赋值</p>\n<h3 id=\"e-三目运算符（三元运算符）\"><a href=\"#e-三目运算符（三元运算符）\" class=\"headerlink\" title=\"e.三目运算符（三元运算符）\"></a>e.三目运算符（三元运算符）</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n* 算术运算符\n* 三目运算符\n*&#x2F;\npublic class Test9 &#123;\n\tpublic static void main(String[] args) &#123;\n\t&#x2F;&#x2F;比较条件?满足true赋的值:满足false赋的值\n\t\tint r1&#x3D;8&gt;5?1:0;\n\t\tSystem.out.println(r1);\n\t\tString r2&#x3D;8&gt;5?&quot;男&quot;:&quot;女&quot;;\n\t\tSystem.out.println(r2);\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"f-位运算符\"><a href=\"#f-位运算符\" class=\"headerlink\" title=\"f.位运算符\"></a>f.位运算符</h3><p>很少用</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">System.out.println(1&gt;&gt;2);\nSystem.out.println(1&lt;&lt;2);</code></pre>\n\n<h2 id=\"H-值比较\"><a href=\"#H-值比较\" class=\"headerlink\" title=\"H.值比较\"></a>H.值比较</h2><p>1.数值之间比较</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">boolean r1&#x3D;7&#x3D;&#x3D;8; &#x2F;&#x2F;&#x3D;&#x3D;用于数值之间比较</code></pre>\n\n<p>&#x3D;&#x3D;是用于数值之间比较，比较的是内存地址是否相等。&#x3D;&#x3D;当int 1&#x3D;7;的时候，首先去内存中找是否有7这个常量，如果没有就根据int开辟一个4字节的空间内存7，地址赋给a；当int b&#x3D;7，如果内存有7就没必要重新开辟新的空间，而是将7的地址赋给b变量，因此a&#x3D;&#x3D;b是判断两个值的内存地址是否一致</p>\n<p>&#x3D;&#x3D;基本数据类型是保存在堆（堆栈）内存，数据可共享，引用类型是保存在堆内存，数据不共享&#x3D;&#x3D;</p>\n<p><img src=\"/post/Java%E5%9F%BA%E7%A1%80/day02/tu2.png\"></p>\n<p>2.equals</p>\n<p>字符串比较</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">String name&#x3D;&quot;&quot;;\nString name1&#x3D;&quot;&quot;;\n\nSystem.out.println(name.equals(name1));&#x2F;&#x2F;比较字符串的值是否相等\nSystem.out.println(!name.equals(name1));</code></pre>\n\n<h2 id=\"I-常量\"><a href=\"#I-常量\" class=\"headerlink\" title=\"I.常量\"></a>I.常量</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;用final修饰的变量叫常量，用于经常使用固定的值而并不会经常发送改变的值，比如一周7天\nfinal int WEEKDAY&#x3D;7;\nSystem.out.println(&quot;一周&quot;+WEEKDAY+&quot;天&quot;);</code></pre>\n\n<h2 id=\"J-Bigdecimal精密计算\"><a href=\"#J-Bigdecimal精密计算\" class=\"headerlink\" title=\"J.Bigdecimal精密计算\"></a>J.Bigdecimal精密计算</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;由于double和float不是一个精确的数，不合适去做金融类的计算\n&#x2F;&#x2F;在java.math包下提供了一个BigInteger和Bigdecimal去做计算\ndouble a&#x3D;1.0-0.1-0.1-0.1-0.1-0.1;&#x2F;&#x2F;0.5000000000000001 \nSystem.out.println(a);</code></pre>\n\n<h3 id=\"a-概述\"><a href=\"#a-概述\" class=\"headerlink\" title=\"a.概述\"></a>a.概述</h3><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以开发中，如果我们需要精确计算的结果，则必须使用BigDecimal类来操作。</p>\n<p> BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、&#x2F;等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。</p>\n<h3 id=\"b-常用构造函数\"><a href=\"#b-常用构造函数\" class=\"headerlink\" title=\"b.常用构造函数\"></a>b.常用构造函数</h3><h4 id=\"1-常用构造函数\"><a href=\"#1-常用构造函数\" class=\"headerlink\" title=\"1.常用构造函数\"></a>1.常用构造函数</h4><ol>\n<li><p>BigDecimal(int)\t\t\t\t\t\t\t</p>\n<p>创建一个具有参数所指定整数值的对象</p>\n</li>\n<li><p>BigDecimal(double)</p>\n<p>创建一个具有参数所指定双精度值的对象</p>\n</li>\n<li><p>BigDecimal(long)</p>\n<p>创建一个具有参数所指定长整数值的对象</p>\n</li>\n<li><p>BigDecimal(String)</p>\n<p>创建一个具有参数所指定以字符串表示的数值的对象</p>\n</li>\n</ol>\n<h4 id=\"2-使用问题分析\"><a href=\"#2-使用问题分析\" class=\"headerlink\" title=\"2.使用问题分析\"></a>2.使用问题分析</h4><p>使用示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">BigDecimal a &#x3D;new BigDecimal(0.1);\n        System.out.println(&quot;a values is:&quot;+a);\n        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);\n        BigDecimal b &#x3D;new BigDecimal(&quot;0.1&quot;);\n        System.out.println(&quot;b values is:&quot;+b);</code></pre>\n\n<p>结果示例：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a values is:0.1000000000000000055511151231257827021181583404541015625\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nb values is:0.1</code></pre>\n\n<p>原因分析：</p>\n<p>1）参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。</p>\n<p>2）String 构造方法是完全可预知的：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常建议优先使用String构造方法。</p>\n<p>3）当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。</p>\n<h3 id=\"c-常用方法详解\"><a href=\"#c-常用方法详解\" class=\"headerlink\" title=\"c.常用方法详解\"></a>c.常用方法详解</h3><h4 id=\"1-常用方法\"><a href=\"#1-常用方法\" class=\"headerlink\" title=\"1.常用方法\"></a>1.常用方法</h4><ol>\n<li><p>add(BigDecimal)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n<p>BigDecimal对象中的值相加，返回BigDecimal对象</p>\n</li>\n<li><p>subtract(BigDecimal)</p>\n<p>BigDecimal对象中的值相减，返回BigDecimal对象</p>\n</li>\n<li><p>multiply(BigDecimal)</p>\n<p>BigDecimal对象中的值相乘，返回BigDecimal对象</p>\n</li>\n<li><p>divide(BigDecimal)</p>\n<p>BigDecimal对象中的值相除，返回BigDecimal对象</p>\n</li>\n<li><p>toString()</p>\n<p>将BigDecimal对象中的值转换成字符串</p>\n</li>\n<li><p>doubleValue()</p>\n<p>将BigDecimal对象中的值转换成双精度数</p>\n</li>\n<li><p>floatValue()</p>\n<p>将BigDecimal对象中的值转换成单精度数</p>\n</li>\n<li><p>longValue()</p>\n<p>将BigDecimal对象中的值转换成长整数</p>\n</li>\n<li><p>intValue()</p>\n<p>将BigDecimal对象中的值转换成整数</p>\n</li>\n<li><p>BigDecimal remainder(BigDecimal divisor)</p>\n<p>求余数，求BigDecimal类型数据除以divisor的余数。</p>\n</li>\n<li><p>BigDecimal max(BigDecimal value)</p>\n<p>最大数，求两个BigDecimal类型数据的最大值。</p>\n</li>\n<li><p>BigDecimal min(BigDecimal value)</p>\n<p>最小数，求两个BigDecimal类型数据的最小值。</p>\n</li>\n<li><p>BigDecimal abs()</p>\n<p>绝对值，求BigDecimal类型数据的绝对值。</p>\n</li>\n<li><p>BigDecimal negate()</p>\n<p>相反数，求BigDecimal类型数据的相反数。</p>\n</li>\n</ol>\n<h4 id=\"2-大小比较\"><a href=\"#2-大小比较\" class=\"headerlink\" title=\"2.大小比较\"></a>2.大小比较</h4><p>java中对BigDecimal比较大小一般用的是bigdemical的compareTo方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a &#x3D; bigdemical.compareTo(bigdemical2)</code></pre>\n\n<p>返回结果分析：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">a &#x3D; -1,表示bigdemical小于bigdemical2；\na &#x3D; 0,表示bigdemical等于bigdemical2；\na &#x3D; 1,表示bigdemical大于bigdemical2；</code></pre>\n\n<p>举例：a大于等于b</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">new bigdemica(a).compareTo(new bigdemical(b)) &gt;&#x3D; 0</code></pre>\n\n<h3 id=\"d-BigDecimal格式化\"><a href=\"#d-BigDecimal格式化\" class=\"headerlink\" title=\"d.BigDecimal格式化\"></a>d.BigDecimal格式化</h3><p>由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。</p>\n<p>以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">NumberFormat currency &#x3D; NumberFormat.getCurrencyInstance(); &#x2F;&#x2F;建立货币格式化引用 \n   NumberFormat percent &#x3D; NumberFormat.getPercentInstance();  &#x2F;&#x2F;建立百分比格式化引用 \n   percent.setMaximumFractionDigits(3); &#x2F;&#x2F;百分比小数点最多3位 \n   \n   BigDecimal loanAmount &#x3D; new BigDecimal(&quot;15000.48&quot;); &#x2F;&#x2F;贷款金额\n   BigDecimal interestRate &#x3D; new BigDecimal(&quot;0.008&quot;); &#x2F;&#x2F;利率   \n   BigDecimal interest &#x3D; loanAmount.multiply(interestRate); &#x2F;&#x2F;相乘\n\n   System.out.println(&quot;贷款金额:\\t&quot; + currency.format(loanAmount)); \n   System.out.println(&quot;利率:\\t&quot; + percent.format(interestRate)); \n   System.out.println(&quot;利息:\\t&quot; + currency.format(interest)); </code></pre>\n\n<p>结果：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">贷款金额: ￥15,000.48 利率: 0.8% 利息: ￥120.00</code></pre>\n\n<p>BigDecimal格式化保留2为小数，不足则补0：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class NumberFormat &#123;\n\t\n\tpublic static void main(String[] s)&#123;\n\t\tSystem.out.println(formatToNumber(new BigDecimal(&quot;3.435&quot;)));\n\t\tSystem.out.println(formatToNumber(new BigDecimal(0)));\n\t\tSystem.out.println(formatToNumber(new BigDecimal(&quot;0.00&quot;)));\n\t\tSystem.out.println(formatToNumber(new BigDecimal(&quot;0.001&quot;)));\n\t\tSystem.out.println(formatToNumber(new BigDecimal(&quot;0.006&quot;)));\n\t\tSystem.out.println(formatToNumber(new BigDecimal(&quot;0.206&quot;)));\n    &#125;\n\t&#x2F;**\n\t * @desc 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。\n\t * 2.传入的参数等于0，则直接返回字符串&quot;0.00&quot;\n\t * 3.大于1的小数，直接格式化返回字符串\n\t * @param obj传入的小数\n\t * @return\n\t *&#x2F;\n\tpublic static String formatToNumber(BigDecimal obj) &#123;\n\t\tDecimalFormat df &#x3D; new DecimalFormat(&quot;#.00&quot;);\n\t\tif(obj.compareTo(BigDecimal.ZERO)&#x3D;&#x3D;0) &#123;\n\t\t\treturn &quot;0.00&quot;;\n\t\t&#125;else if(obj.compareTo(BigDecimal.ZERO)&gt;0&amp;&amp;obj.compareTo(new BigDecimal(1))&lt;0)&#123;\n\t\t\treturn &quot;0&quot;+df.format(obj).toString();\n\t\t&#125;else &#123;\n\t\t\treturn df.format(obj).toString();\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<p>结果为：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">3.44\n0.00\n0.00\n0.00\n0.01\n0.21</code></pre>\n\n<h3 id=\"e-BigDecimal常见异常\"><a href=\"#e-BigDecimal常见异常\" class=\"headerlink\" title=\"e.BigDecimal常见异常\"></a>e.BigDecimal常见异常</h3><h4 id=\"除法的时候出现异常\"><a href=\"#除法的时候出现异常\" class=\"headerlink\" title=\"除法的时候出现异常\"></a>除法的时候出现异常</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result</code></pre>\n\n<p><strong>原因分析：</strong></p>\n<p> 通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</p>\n<p><strong>解决方法：</strong></p>\n<p> divide方法设置精确的小数点，如：divide(xxxxx,2)</p>\n<h3 id=\"f-BigDecimal总结\"><a href=\"#f-BigDecimal总结\" class=\"headerlink\" title=\"f.BigDecimal总结\"></a>f.BigDecimal总结</h3><h4 id=\"1-总结\"><a href=\"#1-总结\" class=\"headerlink\" title=\"1.总结\"></a>1.总结</h4><ol>\n<li>在需要精确的小数计算时再使用BigDecimal，BigDecimal的性能比double和float差，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。</li>\n<li>尽量使用参数类型为String的构造函数。</li>\n<li>BigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</li>\n</ol>\n<h4 id=\"2-工具类推荐\"><a href=\"#2-工具类推荐\" class=\"headerlink\" title=\"2.工具类推荐\"></a>2.工具类推荐</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.vivo.ars.util;\nimport java.math.BigDecimal;\n\n&#x2F;**\n * 用于高精确处理常用的数学运算\n *&#x2F;\npublic class ArithmeticUtils &#123;\n    &#x2F;&#x2F;默认除法运算精度\n    private static final int DEF_DIV_SCALE &#x3D; 10;\n\n    &#x2F;**\n     * 提供精确的加法运算\n     *\n     * @param v1 被加数\n     * @param v2 加数\n     * @return 两个参数的和\n     *&#x2F;\n\n    public static double add(double v1, double v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(Double.toString(v1));\n        BigDecimal b2 &#x3D; new BigDecimal(Double.toString(v2));\n        return b1.add(b2).doubleValue();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的加法运算\n     *\n     * @param v1 被加数\n     * @param v2 加数\n     * @return 两个参数的和\n     *&#x2F;\n    public static BigDecimal add(String v1, String v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.add(b2);\n    &#125;\n\n    &#x2F;**\n     * 提供精确的加法运算\n     *\n     * @param v1    被加数\n     * @param v2    加数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的和\n     *&#x2F;\n    public static String add(String v1, String v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的减法运算\n     *\n     * @param v1 被减数\n     * @param v2 减数\n     * @return 两个参数的差\n     *&#x2F;\n    public static double sub(double v1, double v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(Double.toString(v1));\n        BigDecimal b2 &#x3D; new BigDecimal(Double.toString(v2));\n        return b1.subtract(b2).doubleValue();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的减法运算。\n     *\n     * @param v1 被减数\n     * @param v2 减数\n     * @return 两个参数的差\n     *&#x2F;\n    public static BigDecimal sub(String v1, String v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.subtract(b2);\n    &#125;\n\n    &#x2F;**\n     * 提供精确的减法运算\n     *\n     * @param v1    被减数\n     * @param v2    减数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的差\n     *&#x2F;\n    public static String sub(String v1, String v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的乘法运算\n     *\n     * @param v1 被乘数\n     * @param v2 乘数\n     * @return 两个参数的积\n     *&#x2F;\n    public static double mul(double v1, double v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(Double.toString(v1));\n        BigDecimal b2 &#x3D; new BigDecimal(Double.toString(v2));\n        return b1.multiply(b2).doubleValue();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的乘法运算\n     *\n     * @param v1 被乘数\n     * @param v2 乘数\n     * @return 两个参数的积\n     *&#x2F;\n    public static BigDecimal mul(String v1, String v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.multiply(b2);\n    &#125;\n\n    &#x2F;**\n     * 提供精确的乘法运算\n     *\n     * @param v1    被乘数\n     * @param v2    乘数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的积\n     *&#x2F;\n    public static double mul(double v1, double v2, int scale) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(Double.toString(v1));\n        BigDecimal b2 &#x3D; new BigDecimal(Double.toString(v2));\n        return round(b1.multiply(b2).doubleValue(), scale);\n    &#125;\n\n    &#x2F;**\n     * 提供精确的乘法运算\n     *\n     * @param v1    被乘数\n     * @param v2    乘数\n     * @param scale 保留scale 位小数\n     * @return 两个参数的积\n     *&#x2F;\n    public static String mul(String v1, String v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到\n     * 小数点以后10位，以后的数字四舍五入\n     *\n     * @param v1 被除数\n     * @param v2 除数\n     * @return 两个参数的商\n     *&#x2F;\n\n    public static double div(double v1, double v2) &#123;\n        return div(v1, v2, DEF_DIV_SCALE);\n    &#125;\n\n    &#x2F;**\n     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指\n     * 定精度，以后的数字四舍五入\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 表示表示需要精确到小数点以后几位。\n     * @return 两个参数的商\n     *&#x2F;\n    public static double div(double v1, double v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(&quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(Double.toString(v1));\n        BigDecimal b2 &#x3D; new BigDecimal(Double.toString(v2));\n        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();\n    &#125;\n\n    &#x2F;**\n     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指\n     * 定精度，以后的数字四舍五入\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 表示需要精确到小数点以后几位\n     * @return 两个参数的商\n     *&#x2F;\n    public static String div(String v1, String v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(&quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v1);\n        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的小数位四舍五入处理\n     *\n     * @param v     需要四舍五入的数字\n     * @param scale 小数点后保留几位\n     * @return 四舍五入后的结果\n     *&#x2F;\n    public static double round(double v, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(&quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b &#x3D; new BigDecimal(Double.toString(v));\n        return b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();\n    &#125;\n\n    &#x2F;**\n     * 提供精确的小数位四舍五入处理\n     *\n     * @param v     需要四舍五入的数字\n     * @param scale 小数点后保留几位\n     * @return 四舍五入后的结果\n     *&#x2F;\n    public static String round(String v, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b &#x3D; new BigDecimal(v);\n        return b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 取余数\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 小数点后保留几位\n     * @return 余数\n     *&#x2F;\n    public static String remainder(String v1, String v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        return b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();\n    &#125;\n\n    &#x2F;**\n     * 取余数  BigDecimal\n     *\n     * @param v1    被除数\n     * @param v2    除数\n     * @param scale 小数点后保留几位\n     * @return 余数\n     *&#x2F;\n    public static BigDecimal remainder(BigDecimal v1, BigDecimal v2, int scale) &#123;\n        if (scale &lt; 0) &#123;\n            throw new IllegalArgumentException(\n                    &quot;The scale must be a positive integer or zero&quot;);\n        &#125;\n        return v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);\n    &#125;\n\n    &#x2F;**\n     * 比较大小\n     *\n     * @param v1 被比较数\n     * @param v2 比较数\n     * @return 如果v1 大于v2 则 返回true 否则false\n     *&#x2F;\n    public static boolean compare(String v1, String v2) &#123;\n        BigDecimal b1 &#x3D; new BigDecimal(v1);\n        BigDecimal b2 &#x3D; new BigDecimal(v2);\n        int bj &#x3D; b1.compareTo(b2);\n        boolean res;\n        if (bj &gt; 0)\n            res &#x3D; true;\n        else\n            res &#x3D; false;\n        return res;\n    &#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"K-上机作业\"><a href=\"#K-上机作业\" class=\"headerlink\" title=\"K.上机作业\"></a>K.上机作业</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">控制台输入语文、数学、英语三门课程的成绩，得到总分和平均分</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test11 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n        \n\t\tSystem.out.println(&quot;请输入语文成绩:&quot;);\n\t\tint yuwen&#x3D;input.nextInt();\n\t\tSystem.out.println(&quot;请输入数学成绩:&quot;);\n\t\tint shuxue&#x3D;input.nextInt();\n\t\tSystem.out.println(&quot;请输入英语成绩:&quot;);\n\t\tint yingyu&#x3D;input.nextInt();\n        \n\t\t&#x2F;&#x2F;统计总分\n\t\tint total&#x3D;yuwen+shuxue+yingyu;\n        System.out.println(&quot;3门课程的总分是:&quot;+total);\n\t\t&#x2F;&#x2F;平均分\n\t\tdouble avgScore&#x3D;total&#x2F;3.0;\n\t\tSystem.out.println(&quot;3门课程的平均分是:&quot;+avgScore);\n\t&#125;\n&#125;</code></pre>\n\n<p>作业：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test12 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.println(&quot;请输入一个4位长度的整数:&quot;);\n\t\tint num&#x3D;input.nextInt();\n\t\t&#x2F;&#x2F;分别统计出各位、十位、百位、千位的数\n\t\t&#x2F;&#x2F; 1234\n\t&#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Test7 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.println(&quot;请输入一个4位长度的整数：&quot;);\n\t\tint num&#x3D; input.nextInt();\n\t\t\n\t\tint geWei &#x3D;num%10;\n\t\tint shiWei&#x3D;num&#x2F;10%10;\n\t\tint baiWei&#x3D;num&#x2F;100%10;\n\t\tint qianWei&#x3D;num&#x2F;1000;\n\t\t\n\t\tint num1&#x3D;qianWei+baiWei*10+shiWei*100+geWei*1000;\n\t\tSystem.out.println(&quot;个位&quot;+geWei+&quot;十位&quot;+shiWei+&quot;百位&quot;+baiWei+&quot;千位&quot;+qianWei);\n\t\tSystem.out.println(num1);\n\t\t\n        int total&#x3D;geWei+shiWei+baiWei+qianWei;\n\t\tString message&#x3D;total&gt;20?&quot;幸运顾客&quot;:&quot;谢谢惠顾&quot;;\n\t\tSystem.out.println(message);\n        \n\t\tinput.close();\n\t&#125;\n&#125;</code></pre>\n\n<h1 id=\"三：选择结构\"><a href=\"#三：选择结构\" class=\"headerlink\" title=\"三：选择结构\"></a>三：选择结构</h1><p>用于选择和判断</p>\n<h2 id=\"A-if结构\"><a href=\"#A-if结构\" class=\"headerlink\" title=\"A.if结构\"></a>A.if结构</h2><h3 id=\"a-简单if\"><a href=\"#a-简单if\" class=\"headerlink\" title=\"a.简单if\"></a>a.简单if</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int money&#x3D;10;\nif(money&gt;100)&#123;\n\tSystem.out.println(&quot;买兰博基尼&quot;);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int money&#x3D;10;\nif(money&gt;100)&#123;\n\tSystem.out.println(&quot;买兰博基尼&quot;);\n&#125;else &#123;\n\tSystem.out.println(&quot;没有钱，坐公交车&quot;);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Scanner input&#x3D;new Scanner(System.in);\ndouble zhekou;&#x2F;&#x2F;折扣\nSystem.out.print(&quot;请输入您的性别:&quot;);\nString sex&#x3D;input.next();\nif(&quot;男&quot;.equals(sex))&#123;\n&#x2F;&#x2F;根据性别来判断折扣\n\tzhekou&#x3D;0.8;\n&#125;else &#123;\n\tzhekou&#x3D;0.5;\n&#125;\nSystem.out.println(&quot;您的折扣是:&quot;+zhekou+&quot;折!&quot;);\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Scanner input&#x3D;new Scanner(System.in);\ndouble zhekou;&#x2F;&#x2F;折扣\nSystem.out.print(&quot;请输入您的性别:&quot;);\nchar sex&#x3D;input.next().charAt(0);&#x2F;&#x2F;charAt是根据索引取到字符串第几个字符\nif(sex&#x3D;&#x3D;&#39;男&#39;)&#123;\n&#x2F;&#x2F;根据性别来判断折扣\n\tzhekou&#x3D;0.8;\n&#125;else &#123;\n\tzhekou&#x3D;0.5;\n&#125;\nSystem.out.println(&quot;您的折扣是:&quot;+zhekou+&quot;折!&quot;);\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n* 简单if结构\n* 输入语文和数学的成绩\n* 如果语文大于95并且数学大于90分，奖励劳斯莱斯一辆\n* 或者语文100分并且数学大于80分，也奖励劳斯莱斯一辆\n*\n*&#x2F;\npublic class Test5 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.print(&quot;请输入语文成绩:&quot;);\n\t\tint yuwen&#x3D;input.nextInt();\n\t\tSystem.out.print(&quot;请输入数学成绩:&quot;);\n\t\tint shuxue&#x3D;input.nextInt();\n        \n\t\tif((yuwen&gt;&#x3D;95&amp;&amp;shuxue&gt;&#x3D;90)||(yuwen&#x3D;&#x3D;100&amp;&amp;shuxue&gt;&#x3D;80))&#123;\n\t\t\tSystem.out.println(&quot;奖励劳斯莱斯一辆！&quot;);\n\t\t&#125;else &#123;\n\t\tSystem.out.println(&quot;抱歉，不奖励！&quot;);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"b-多重if\"><a href=\"#b-多重if\" class=\"headerlink\" title=\"b.多重if\"></a>b.多重if</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n* 多重if结构，有多种选择但是选择一种\n* 输入语文成绩\n* 如果大于90分，奖励兰博基尼一台\n* 如果大于80分，奖励奔驰S一台\n* 如果大于60分，奖励宝马5系一台\n* 如果不及格，不奖励\n*\n*&#x2F;\npublic class Test6 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.print(&quot;请输入语文成绩:&quot;);\n\t\tint yuwen&#x3D;input.nextInt();\n        \n\t\tif(yuwen&gt;&#x3D;90) &#123;\n\t\t\tSystem.out.println(&quot;奖励兰博基尼一台！&quot;);\n\t\t&#125; else if(yuwen&gt;&#x3D;80) &#123;\n\t\t\tSystem.out.println(&quot;奖励奔驰S一台一台！&quot;);\n\t\t&#125;else if(yuwen&gt;&#x3D;60) &#123;\n\t\t\tSystem.out.println(&quot;奖励宝马5系一台！&quot;);\n\t\t&#125;else &#123;\n\t\t\tSystem.out.println(&quot;不及格，不奖励&quot;);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n* 多重if结构，用于多种选择\n* 多重if结构可用于区间判断，也可以用于等值判断\n*&#x2F;\npublic class Test7 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tString foodName;&#x2F;&#x2F;食物\n\t\tSystem.out.print(&quot;请输入星期:&quot;);\n\t\tint week&#x3D;input.nextInt();\n        \n\t\tif(week&#x3D;&#x3D;1)&#123;\n\t\t\tfoodName&#x3D;&quot;肯德基&quot;;\n\t\t&#125;else if (week&#x3D;&#x3D;2||week&#x3D;&#x3D;3) &#123;\n\t\t\tfoodName&#x3D;&quot;必胜客&quot;;\n\t\t&#125;else if (week&#x3D;&#x3D;4) &#123;\n\t\t\tfoodName&#x3D;&quot;德克士&quot;;\n\t\t&#125;else if (week&#x3D;&#x3D;5) &#123;\n\t\t\tfoodName&#x3D;&quot;华莱士&quot;;\n\t\t&#125;else &#123;\n\t\t\tfoodName&#x3D;&quot;泡面&quot;;\n\t\t&#125;\n\t\tSystem.out.println(&quot;吃:&quot;+foodName);\n\t&#125;\n&#125;</code></pre>\n\n<h3 id=\"c-嵌套if\"><a href=\"#c-嵌套if\" class=\"headerlink\" title=\"c.嵌套if\"></a>c.嵌套if</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n*\n* 嵌套if结构\n*\n*&#x2F;\npublic class Test8 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input &#x3D; new Scanner(System.in);\n\t\tString foodName &#x3D; &quot;&quot;;&#x2F;&#x2F; 食物\n\t\tSystem.out.print(&quot;请输入星期:&quot;);\n\t\tint week &#x3D; input.nextInt();\n        \n\t\tif (week &gt;&#x3D; 1 &amp;&amp; week &lt;&#x3D; 7) &#123;\n\t\t\tif (week &#x3D;&#x3D; 1) &#123;\n\t\t\t\tfoodName &#x3D; &quot;肯德基&quot;;\n\t\t\t&#125; else if (week &#x3D;&#x3D; 2 || week &#x3D;&#x3D; 3) &#123;\n\t\t\t\tfoodName &#x3D; &quot;必胜客&quot;;\n\t\t\t&#125; else if (week &#x3D;&#x3D; 4) &#123;\n\t\t\t\tfoodName &#x3D; &quot;德克士&quot;;\n\t\t\t&#125; else if (week &#x3D;&#x3D; 5) &#123;\n\t\t\t\tfoodName &#x3D; &quot;华莱士&quot;;\n\t\t\t&#125; else &#123;\n\t\t\t\tfoodName &#x3D; &quot;泡面&quot;;\n\t\t\t&#125;\n\t\t\tSystem.out.println(&quot;吃:&quot; + foodName);\n\t\t&#125; else &#123;\n\t\tSystem.out.println(&quot;抱歉，只能输入1-7之间的整数！&quot;);\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n\n\n<h2 id=\"B-switch结构\"><a href=\"#B-switch结构\" class=\"headerlink\" title=\"B.switch结构\"></a>B.switch结构</h2><p>&#x3D;&#x3D;switch也能用于多重选择，但是switch只能用于等值判断，不能用于区间判断&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.println(&quot;输入星期：&quot;);\n\t\tint days&#x3D;input.nextInt();\n\t\tString food &#x3D; null;\n\t\t\n\t\tswitch (days) &#123;\n\t\t\tcase 1:\n\t\t\t\tfood&#x3D;&quot;KFC&quot;;\n\t\t\t\tbreak;\t\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\t\tfood&#x3D;&quot;BSK&quot;;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tfood&#x3D;&quot;DKS&quot;;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tfood&#x3D;&quot;饺子&quot;;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\t\tfood&#x3D;&quot;泡面&quot;;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t&#125;\n\t\tSystem.out.println(&quot;吃：&quot;+food);\n\t\tinput.close();\n\t&#125;</code></pre>\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static void main(String[] args) &#123;\n\t\tScanner input&#x3D;new Scanner(System.in);\n\t\tSystem.out.println(&quot;输入星期：&quot;);\n\t\tint days&#x3D;input.nextInt();\n\t\tString food &#x3D; null;\n\t\t\n\t\tif(days&gt;7||days&lt;1) &#123;\n\t\t\tSystem.out.println(&quot;error&quot;);\n\t\t&#125;else &#123;\n\t\t\tswitch (days) &#123;\n\t\t\tcase 1:\n\t\t\t\tfood&#x3D;&quot;KFC&quot;;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 2:\n\t\t\tcase 3:\n\t\t\t\tfood&#x3D;&quot;BSK&quot;;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 4:\n\t\t\t\tfood&#x3D;&quot;DKS&quot;;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tcase 5:\n\t\t\t\tfood&#x3D;&quot;饺子&quot;;\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 6:\n\t\t\tcase 7:\n\t\t\t\tfood&#x3D;&quot;泡面&quot;;\n\t\t\t\tbreak;\n\t\t\t\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t\t&#125;\n\t\t\tSystem.out.println(&quot;吃：&quot;+food);\n\t\t&#125;\n\t\t\n\t\tinput.close();\n\t&#125;</code></pre>\n\n<h2 id=\"C-上机作业\"><a href=\"#C-上机作业\" class=\"headerlink\" title=\"C.上机作业\"></a>C.上机作业</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">*************中兴爱买不买购物超市系统***********\n1.帽子 2.T恤 3.裤衩\n10￥ 15￥ 30￥\n请输入编号选择商品:2\n请选择购买的数量:5\n您购买的商品:T恤,金额是:75\n请输入支付的金额:100\n找零:25</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">import java.util.Scanner;\n\npublic class Test8 &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tScanner input &#x3D;new Scanner(System.in);\n\t\tSystem.out.println(&quot;********超市********&quot;);\n\t\tSystem.out.println(&quot;1.帽子\\t2.T恤\\t3.羽绒服&quot;);\n\t\tSystem.out.println(&quot;10￥\\t15￥\\t40￥&quot;);\n\t\tSystem.out.println(&quot;请输入要购买的的商品编码：&quot;);\n\t\tint bianMa&#x3D;input.nextInt();\n\t\tString shangPin&#x3D;null;\n\t\tint price&#x3D;0;\n\t\t\n\t\tif(bianMa&gt;&#x3D;1&amp;&amp;bianMa&lt;&#x3D;3) &#123;\n\t\t\tif (bianMa&#x3D;&#x3D;1) &#123;\n\t\t\t\tshangPin&#x3D;&quot;帽子&quot;;\n\t\t\t\tprice&#x3D;10;\n\t\t\t&#125; else if (bianMa&#x3D;&#x3D;2) &#123;\n\t\t\t\tshangPin&#x3D;&quot;T恤&quot;;\n\t\t\t\tprice&#x3D;15;\n\t\t\t&#125; else &#123;\n\t\t\t\tshangPin&#x3D;&quot;羽绒服&quot;;\n\t\t\t\tprice&#x3D;40;\n\t\t\t&#125;\n\t\t\tSystem.out.println(&quot;您选中的的商品为：&quot;+shangPin+&quot;此商品的单价为：&quot;+price);\n\t\t\tSystem.out.println(&quot;请输入你要购买的数量：&quot;);\n\t\t\tint count&#x3D;input.nextInt();\n\t\t\tint total&#x3D;0;\n\t\t\ttotal&#x3D;count*price;\n\t\t\tSystem.out.println(&quot;您需要支付的金额：&quot;+total);\n\t\t\tSystem.out.println(&quot;您支付的金额：&quot;);\n\t\t\tint money&#x3D;input.nextInt();\n\t\t\tint retuenMoney&#x3D;money-total;\n\t\t\tif (retuenMoney&gt;0) &#123;\n\t\t\t\tSystem.out.println(retuenMoney);\n\t\t\t&#125;else &#123;\n\t\t\t\tSystem.out.println(&quot;金额不足&quot;);\n\t\t\t&#125;\n\t\t\tif(total&gt;1000) &#123;\n\t\t\t\tint lucknum&#x3D;(int) (Math.random()*10)+1;\n\t\t\t\tSystem.out.println(lucknum);\n\t\t\t\tif (lucknum&gt;5&amp;&amp;lucknum&lt;&#x3D;8) &#123;\n\t\t\t\t\tSystem.out.println(&quot;恭喜获得三等奖：垃圾桶10个&quot;);\n\t\t\t\t&#125; else if(lucknum&gt;8&amp;&amp;lucknum&lt;&#x3D;9)&#123;\n\t\t\t\t\tSystem.out.println(&quot;恭喜获得二等奖：冰箱一台&quot;);\n\t\t\t\t&#125;else if(lucknum&#x3D;&#x3D;10)&#123;\n\t\t\t\t\tSystem.out.println(&quot;恭喜获得一等奖：洗衣机一台&quot;);\n\t\t\t\t&#125;else &#123;\n\t\t\t\t\tSystem.out.println(&quot;恭喜获得安慰奖：抽纸10包&quot;);\n\t\t\t\t&#125;\n\t\t\t&#125;else &#123;\n\t\t\t\tSystem.out.println(&quot;无法参与抽奖&quot;);\n\t\t\t&#125;\n\t\t&#125;else &#123;\n\t\t\tSystem.out.println(&quot;请输入正确的商品编码：&quot;);\n\t\t&#125;\n\t\tinput.close();\n\t&#125;\n&#125;</code></pre>\n\n<h2 id=\"D-代码调试\"><a href=\"#D-代码调试\" class=\"headerlink\" title=\"D.代码调试\"></a>D.代码调试</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">我们可以通过调试模式让原本自动执行的代码按原本的执行轨迹不变，变成手动一行一行的去执行，就可以看到代码执行，也能看到程序的漏洞。\n    1.可以看到代码一步步的执行\n    2.</code></pre>\n\n<h1 id=\"四：循环结构\"><a href=\"#四：循环结构\" class=\"headerlink\" title=\"四：循环结构\"></a>四：循环结构</h1><h2 id=\"A-定义-1\"><a href=\"#A-定义-1\" class=\"headerlink\" title=\"A.定义\"></a>A.定义</h2><p>循环：在特定的条件下重复做一件事</p>\n<h2 id=\"B-循环分类\"><a href=\"#B-循环分类\" class=\"headerlink\" title=\"B.循环分类\"></a>B.循环分类</h2><h3 id=\"1-while循环\"><a href=\"#1-while循环\" class=\"headerlink\" title=\"1.while循环\"></a>1.while循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">先判断，后执行；先判断条件是否满足，如果满足为true，就继续执行</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">while(布尔表达式)&#123;\n    &#x2F;&#x2F;循环内容\n&#125;</code></pre>\n\n<p>只要布尔表达式为true，循环体会一直执行下去。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n    public static void main(String args[]) &#123;\n    int x &#x3D; 10;\n        while( x &lt; 20 ) &#123;          \n          System.out.print(&quot;value of x : &quot; + x );          \t           x++;\n          System.out.print(&quot;\\n&quot;);       \n        &#125;    \n    &#125; \n&#125; </code></pre>\n\n\n\n<h3 id=\"2-do-while循环\"><a href=\"#2-do-while循环\" class=\"headerlink\" title=\"2.do-while循环\"></a>2.do-while循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。\n\ndo…while循环和while循环相似，不同的是，do…while循环至少会执行一次。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">do &#123;\n       &#x2F;&#x2F;代码语句\n&#125;while(布尔表达式);</code></pre>\n\n<p><strong>注意：</strong>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为true，则语句块一直执行，直到布尔表达式的值为false。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n\n   public static void main(String args[])&#123;\n      int x &#x3D; 10;\n\n      do&#123;\n         System.out.print(&quot;value of x : &quot; + x );\n         x++;\n         System.out.print(&quot;\\n&quot;);\n      &#125;while( x &lt; 20 );    &#125; &#125; </code></pre>\n\n\n\n<h3 id=\"3-for循环\"><a href=\"#3-for循环\" class=\"headerlink\" title=\"3.for循环\"></a>3.for循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">虽然所有循环结构都可以用while或者do...while表示，但Java提供了另一种语句 —— for循环，使一些循环结构变得更加简单。\n\nfor循环执行的次数是在执行前就确定的。语法格式如下：</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(初始化; 布尔表达式; 更新) &#123;\n    &#x2F;&#x2F;代码语句\n&#125;</code></pre>\n\n<p>关于for循环有以下几点说明：</p>\n<ul>\n<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\n<li>然后，检测布尔表达式的值。如果为true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\n<li>执行一次循环后，更新循环控制变量。</li>\n<li>再次检测布尔表达式。循环执行上面的过程。</li>\n</ul>\n<h3 id=\"4-加强for循环\"><a href=\"#4-加强for循环\" class=\"headerlink\" title=\"4.加强for循环\"></a>4.加强for循环</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Java5引入了一种主要用于数组的增强型for循环。\n\nJava增强for循环语法格式如下:</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">for(声明语句 : 表达式)\n&#123;\n   &#x2F;&#x2F;代码句子\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n表达式：表达式是要访问的数组名，或者是返回值为数组的方法。</code></pre>\n\n<h2 id=\"C-关键字\"><a href=\"#C-关键字\" class=\"headerlink\" title=\"C.关键字\"></a>C.关键字</h2><h3 id=\"1-break关键字\"><a href=\"#1-break关键字\" class=\"headerlink\" title=\"1.break关键字\"></a>1.break关键字</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">reak主要用在循环语句或者switch语句中，用来跳出整个语句块。\n\nbreak跳出最里层的循环，并且继续执行该循环下面的语句。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n\n   public static void main(String args[]) &#123;\n      int [] numbers &#x3D; &#123;10, 20, 30, 40, 50&#125;;\n\n      for(int x : numbers ) &#123;\n         if( x &#x3D;&#x3D; 30 ) &#123;\n\t      break;\n         &#125;\n         System.out.print( x );\n         System.out.print(&quot;\\n&quot;);\n      &#125;\n   &#125;\n&#125;</code></pre>\n\n\n\n<h3 id=\"2-continue关键字\"><a href=\"#2-continue关键字\" class=\"headerlink\" title=\"2.continue关键字\"></a>2.continue关键字</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">continue适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。\n\n在for循环中，continue语句使程序立即跳转到更新语句。\n\n在while或者do…while循环中，程序立即跳转到布尔表达式的判断语句。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Test &#123;\n\n   public static void main(String args[]) &#123;\n      int [] numbers &#x3D; &#123;10, 20, 30, 40, 50&#125;;\n\n      for(int x : numbers ) &#123;\n         if( x &#x3D;&#x3D; 30 ) &#123;\n\t      continue;\n         &#125;\n         System.out.print( x );\n         System.out.print(&quot;\\n&quot;);\n      &#125;\n   &#125;\n&#125;</code></pre>\n\n<h3 id=\"3-return\"><a href=\"#3-return\" class=\"headerlink\" title=\"3.return\"></a>3.return</h3><p>return作为方法的返回值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public String getName() &#123; return name; &#125;</code></pre>\n\n<h2 id=\"D-i-和-i的区别\"><a href=\"#D-i-和-i的区别\" class=\"headerlink\" title=\"D.i++和++i的区别\"></a>D.i++和++i的区别</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">int a&#x3D;5; \nint b&#x3D;a+++1;&#x2F;&#x2F;先运算再自增，b结果是6 \nint c&#x3D;++a+1;&#x2F;&#x2F;先自增再运算,c结果是7 \nSystem.out.println(&quot;b:&quot;+b+&quot;,c:&quot;+c);</code></pre>\n\n\n\n<h1 id=\"五：数组\"><a href=\"#五：数组\" class=\"headerlink\" title=\"五：数组\"></a>五：数组</h1><h2 id=\"A-声明数组\"><a href=\"#A-声明数组\" class=\"headerlink\" title=\"A.声明数组\"></a>A.声明数组</h2><p>首先必须声明数组变量，才能在程序中使用数组。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayRefVar;   &#x2F;&#x2F; 首选的方法\n\n或\n\ndataType arrayRefVar[];  &#x2F;&#x2F; 效果相同，但不是首选方法</code></pre>\n\n<h2 id=\"B-创建数组\"><a href=\"#B-创建数组\" class=\"headerlink\" title=\"B.创建数组\"></a>B.创建数组</h2><p>Java 语言使用 new操作符来创建数组</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">arrayRefVar &#x3D; new dataType[arraySize];</code></pre>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">dataType[] arrayRefVar &#x3D; new dataType[arraySize];</code></pre>\n\n<p>另外，还可以使用如下的方式创建数组。</p>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">dataType[] arrayRefVar &#x3D; &#123;value0, value1, ..., valuek&#125;;</code></pre>\n\n<p>数组的元素是通过索引访问的。数组索引从0开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p>那么当数组开辟空间之后，就可以采用如下的方式的操作：</p>\n<ul>\n<li>数组的访问通过索引完成，即：“数组名称[索引]”，但是需要注意的是，数组的索引从0开始，所以索引的范围就是0 ~ 数组长度-1，例如开辟了3个空间的数组，所以可以使用的索引是：0,1,2，如果此时访问的时候超过了数组的索引范围，会产生 java.lang.ArrayIndexOutOfBoundsException 异常信息；</li>\n<li>当我们数组采用动态初始化开辟空间后，数组里面的每一个元素都是该数组对应数据类型的默认值；</li>\n<li>数组本身是一个有序的集合操作，所以对于数组的内容操作往往会采用循环的模式完成，数组是一个有限的数据集合，所以应该使用 for 循环。</li>\n<li>在 Java 中提供有一种动态取得数组长度的方式：数组名称.length；</li>\n</ul>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">数组属于引用数据类型，所以在数组使用之前一定要开辟空间（实例化），如果使用了没有开辟空间的数组，则一定会出现 NullPointerException 异常信息：</code></pre>\n\n<p><img src=\"/day01/tu01.png\"></p>\n<h2 id=\"C-Arrays类\"><a href=\"#C-Arrays类\" class=\"headerlink\" title=\"C.Arrays类\"></a>C.Arrays类</h2><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">序号</th>\n<th align=\"center\">方法和说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><strong>public static int binarySearch(Object[] a, Object key)</strong><br/>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。</td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><strong>public static boolean equals(long[] a, long[] a2)</strong><br/>如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><strong>public static void fill(int[] a, int val)</strong><br/>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n<tr>\n<td align=\"center\">4</td>\n<td align=\"center\"><strong>public static void sort(Object[] a)</strong> 对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</td>\n</tr>\n</tbody></table>\n<h1 id=\"六：面向对象\"><a href=\"#六：面向对象\" class=\"headerlink\" title=\"六：面向对象\"></a>六：面向对象</h1><h2 id=\"A-基本概念\"><a href=\"#A-基本概念\" class=\"headerlink\" title=\"A.基本概念\"></a>A.基本概念</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>面向对象思想将客观世界中的事物描述为对象，并通过抽象思维方法将需要解决的实际问题分解成人们易于理解的对象模型，然后通过这些对象模型来构建应用程序的功能</p>\n<p>面向对象的一些概念</p>\n<p>类、对象、继承、封装、多态等</p></blockquote>\n<p>&#x3D;&#x3D;Object Oriented Programming 面向对象编程，是java编程思想中最重要的编程思想！&#x3D;&#x3D;</p>\n<p>在OOP之前我们是面向过程的：</p>\n<p>面向过程编程：把一个项目在一个类中从上到下去编写代码，把一个事件分成每一步去执行，比如C语言</p>\n<p>面向过程的弊端：</p>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">1.代码都在一个类文件中，自上而下执行，代码的耦合度非常高，后期的扩展功能和维护的成本很高 \n2.代码自上而下执行，代码的复用性不高，不能提高开发效率</code></pre>\n\n<h2 id=\"B-对象的概念\"><a href=\"#B-对象的概念\" class=\"headerlink\" title=\"B.对象的概念\"></a>B.对象的概念</h2><p>​        所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。</p>\n<p>对象有以下特点：</p>\n<ul>\n<li>对象具有属性和行为。</li>\n<li>对象具有变化的状态。</li>\n<li>对象具有唯一性。</li>\n<li>对象都是某个类别的实例。</li>\n<li>一切皆为对象，真实世界中的所有事物都可以视为对象。</li>\n</ul>\n<h3 id=\"a-类和对象\"><a href=\"#a-类和对象\" class=\"headerlink\" title=\"a.类和对象\"></a>a.类和对象</h3><p>​\t\t在面向对象中，类和对象是最基本、最重要的组成单元。类实际上是表示一个客观世界某类群体的一些基本特征抽象。对象就是表示一个个具体的东西。所以说类是对象的抽象，对象是类的具体。</p>\n<p>&#x3D;&#x3D;类是概念模型，定义对象的所有特性和所需的操作，对象是真实的模型，是一个具体的实体。&#x3D;&#x3D;</p>\n<p>类是描述了一组有相同特性（属性）和相同行为（方法）的一组对象的集合。</p>\n<p>对象或实体所拥有的特征在类中表示时称为类的属性。例如，每个人都具有姓名、年龄和体重，这是所有人共有的特征。但是每一个对象的属性值又各不相同，例如，小明和小红都具有体重这个属性，但是他们的体重值是不同的。</p>\n<p>对象执行的操作称为类的方法。比如，“人”这个对象都具有的行为是“吃饭”，因此，吃饭就是“人”类的一个方法。</p>\n<p>类是实体对象的概念模型，因此通常是笼统的、不具体的。</p>\n<p>类是构造面向对象程序的基本单位，是抽取了同类对象的共同属性和方法所形成的对象或实体的“模板”。而对象是现实世界中实体的描述，对象要创建才存在，有了对象才能对对象进行操作。类是对象的模板，对象是类的实例。</p>\n<p>​\t\t&#x3D;&#x3D;类：类是一种分类，一个类别，一个模板，它描述一类对象的行为和状态，是一组具有相同特性（属性）与行为（方法）的事物集合&#x3D;&#x3D;<br>​\t\t&#x3D;&#x3D;对象：是一个个性的产物，是一个个体的特征，是类的一个实例，有状态和行为&#x3D;&#x3D;</p>\n<p><strong>类和对象的关系？</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>类里面有属性和方法，如果你要去调用该类的属性和方法，首相需要创建对象，通过对象可以重复的调用该类中的属性和方法，私有的除外。</p>\n<p>对象能调用到什么属性和方法取决于这个对象属于哪个类(取决于该对象的类型)</p>\n<p>优势：代码重用，提高开发效率</p></blockquote>\n<h3 id=\"b-类的定义\"><a href=\"#b-类的定义\" class=\"headerlink\" title=\"b.类的定义\"></a>b.类的定义</h3><p>&#x3D;&#x3D;类是 <a href=\"http://c.biancheng.net/java/\">Java</a> 中的一种重要的引用数据类型，也是组成 Java 程序的基本要素，因为所有的 Java 程序都是基于类的。&#x3D;&#x3D;</p>\n<p>在 Java 中定义一个类，需要使用 class 关键字、一个自定义的类名和一对表示程序体的大括号。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">[public][abstract|final]class&lt;class_name&gt;[extends&lt;class_name&gt;][implements&lt;interface_name&gt;] &#123;\n    &#x2F;&#x2F; 定义属性部分\n    &lt;property_type&gt;&lt;property1&gt;;\n    &lt;property_type&gt;&lt;property2&gt;;\n    &lt;property_type&gt;&lt;property3&gt;;\n    …\n    &#x2F;&#x2F; 定义方法部分\n    function1();\n    function2();\n    function3();\n    …\n&#125;</code></pre>\n\n<p>提示：上述语法中，中括号“[]”中的部分表示可以省略，竖线“|”表示“或关系”，例如 abstract|final，说明可以使用 abstract 或 final 关键字，但是两个关键字不能同时出现。</p>\n<p>上述语法中各关键字的描述如下。</p>\n<ul>\n<li><code>public</code>：表示“共有”的意思。如果使用 public 修饰，则可以被其他类和程序访问。每个 Java 程序的主类都必须是 public 类，作为公共工具供其他类和程序使用的类应定义为 public 类。</li>\n<li><code>abstract</code>：如果类被 abstract 修饰，则该类为抽象类，抽象类不能被实例化，但抽象类中可以有抽象方法（使用 abstract 修饰的方法）和具体方法（没有使用 abstract 修饰的方法）。继承该抽象类的所有子类都必须实现该抽象类中的所有抽象方法（除非子类也是抽象类）。</li>\n<li><code>final</code>：如果类被 final 修饰，则不允许被继承。</li>\n<li><code>class</code>：声明类的关键字。</li>\n<li><code>class_name</code>：类的名称。</li>\n<li><code>extends</code>：表示继承其他类。</li>\n<li><code>implements</code>：表示实现某些接口。</li>\n<li><code>property_type</code>：表示成员变量的类型。</li>\n<li><code>property</code>：表示成员变量名称。</li>\n<li><code>function()</code>：表示成员方法名称。</li>\n</ul>\n<p>Java 类名的命名规则：</p>\n<ol>\n<li>类名应该以下划线（_）或字母开头，最好以字母开头。</li>\n<li>第一个字母最好大写，如果类名由多个单词组成，则每个单词的首字母最好都大写。</li>\n<li>类名不能为 Java 中的关键字，例如 boolean、this、int 等。</li>\n<li>类名不能包含任何嵌入的空格或点号以及除了下划线（_）和美元符号（$）字符之外的特殊字符。</li>\n</ol>\n<p>创建一个新的类，就是创建一个新的数据类型。实例化一个类，就是得到类的一个对象。因此，对象就是一组变量和相关方法的集合，其中变量表明对象的状态和属性，方法表明对象所具有的行为。定义一个类的步骤如下所述。</p>\n<p>(1) 声明类。编写类的最外层框架，声明一个名称为 Person 的类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Person &#123;\n    &#x2F;&#x2F; 类的主体\n&#125;</code></pre>\n\n<p>(2) 编写类的属性。类中的数据和方法统称为类成员。其中，类的属性就是类的数据成员。通过在类的主体中定义变量来描述类所具有的特征（属性），这里声明的变量称为类的成员变量。</p>\n<p>(3) 编写类的方法。类的方法描述了类所具有的行为，是类的方法成员。可以简单地把方法理解为独立完成某个功能的单元模块。</p>\n<p>下面来定义一个简单的 Person 类。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Person &#123;\n    private String name;    &#x2F;&#x2F; 姓名\n    private int age;    &#x2F;&#x2F; 年龄\n    public void tell() &#123;   \n        &#x2F;&#x2F; 定义说话的方法\n        System.out.println(name+&quot;今年&quot;+age+&quot;岁！&quot;);\n    &#125;\n&#125;</code></pre>\n\n<h3 id=\"c-类的属性\"><a href=\"#c-类的属性\" class=\"headerlink\" title=\"c.类的属性\"></a>c.类的属性</h3><p>在 <a href=\"http://c.biancheng.net/java/\">Java</a> 中类的成员变量定义了类的属性。例如，一个学生类中一般需要有姓名、性别和年龄等属性，这时就需要定义姓名、性别和年龄 3 个属性。声明成员变量的语法如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">[public|protected|private][static][final]&lt;type&gt;&lt;variable_name&gt;</code></pre>\n\n<p>各参数的含义如下。</p>\n<ul>\n<li>public、protected、private：用于表示成员变量的访问权限。</li>\n<li>static：表示该成员变量为类变量，也称为静态变量。</li>\n<li>final：表示将该成员变量声明为常量，其值无法更改。</li>\n<li>type：表示变量的类型。</li>\n<li>variable_name：表示变量名称。</li>\n</ul>\n<p>&#x3D;&#x3D;可以在声明成员变量的同时对其进行初始化，如果声明成员变量时没有对其初始化，则系统会使用默认值初始化成员变量。&#x3D;&#x3D;</p>\n<p>初始化的默认值如下：</p>\n<ul>\n<li>整数型（byte、short、int 和 long）的基本类型变量的默认值为 0。</li>\n<li>单精度浮点型（float）的基本类型变量的默认值为 0.0f。</li>\n<li>双精度浮点型（double）的基本类型变量的默认值为 0.0d。</li>\n<li>字符型（char）的基本类型变量的默认值为 “\\u0000”。</li>\n<li>布尔型的基本类型变量的默认值为 false。</li>\n<li>数组引用类型的变量的默认值为 null。如果创建了数组变量的实例，但没有显式地为每个元素赋值，则数组中的元素初始化值采用数组数据类型对应的默认值。</li>\n</ul>\n<p>定义类的成员变量的示例如下：</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Student &#123;\n    public String name;    &#x2F;&#x2F; 姓名\n    final int sex &#x3D; 0;    &#x2F;&#x2F; 性别：0表示女孩，1表示男孩\n    private int age;    &#x2F;&#x2F; 年龄\n&#125;</code></pre>\n\n<h3 id=\"d-成员方法\"><a href=\"#d-成员方法\" class=\"headerlink\" title=\"d.成员方法\"></a>d.成员方法</h3><p>声明成员方法可以定义类的行为，行为表示一个对象能够做的事情或者能够从一个对象取得的信息。类的各种功能操作都是用方法来实现的，属性只不过提供了相应的数据。一个完整的方法通常包括方法名称、方法主体、方法参数和方法返回值类型，成员方法一旦被定义，便可以在程序中多次调用，提高了编程效率。声明成员方法的语法格式如下：</p>\n<pre class=\"line-numbers language-jav\" data-language=\"jav\"><code class=\"language-jav\">public class Test &#123;\n    [public|private|protected][static]&lt;void|return_type&gt;&lt;method_name&gt;([paramList]) &#123;\n        &#x2F;&#x2F; 方法体\n    &#125;\n&#125;</code></pre>\n\n<p>注意：上述语法中，中括号“[]”中的部分表示可以省略，竖线“|”表示“或”，例如 public|private，说明可以使用 public 或 private 关键字，但是两个关键字不能同时出现。</p>\n<p>上述代码中一个方法包含 4 部分：方法的返回值、方法名称、方法的参数和方法体。其中 retum_type 是方法返回值的数据类型，数据类型可以是原始的数据类型，即常用的 8 种数据类型，也可以是一个引用数据类型，如一个类、接口和数组等。</p>\n<p>除了这些，一个方法还可以没有返回值，即返回类型为 void，像 main() 方法。method_name 表示自定义的方法名称，方法的名称首先要遵循标识符的命名约定，除此之外，方法的名称第一个单词的第一个字母是小写，第二单词的第一个字母是大写，依此类推。</p>\n<p>paramList 表示参数列表，这些变量都要有自己的数据类型，可以是原始数据类型，也可以是复杂数据类型，一个方法主要依靠参数来传递消息。方法主体是方法中执行功能操作的语句。其他各修饰符的含义如下。</p>\n<ul>\n<li>public、private、protected：表示成员方法的访问权限。</li>\n<li>static：表示限定该成员方法为静态方法。</li>\n<li>final：表示限定该成员方法不能被重写或重载。</li>\n<li>abstract：表示限定该成员方法为抽象方法。抽象方法不提供具体的实现，并且所属类型必须为抽象类。</li>\n</ul>\n<h4 id=\"1-成员方法的返回值\"><a href=\"#1-成员方法的返回值\" class=\"headerlink\" title=\"1.成员方法的返回值\"></a>1.成员方法的返回值</h4><p>若方法有返回值，则在方法体中用 return 语句指明要返回的值，其格式如下所示。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">return 表达式\n   或\n   return (表达式)</code></pre>\n\n<p>其中，表达式可以是常量、变量、对象等。表达式的数据类型必须与声明成员方法时给出的返回值类型一致。</p>\n<h4 id=\"2-形参、实参及成员方法的调用\"><a href=\"#2-形参、实参及成员方法的调用\" class=\"headerlink\" title=\"2.形参、实参及成员方法的调用\"></a>2.形参、实参及成员方法的调用</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">methodName(&#123;paramList&#125;)</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public int returnMin(int m,int n) &#123;\n    return Math.min(m,n);    &#x2F;&#x2F; m和n是形参\n&#125;\npublic static void main(String[] args) &#123;\n    int x &#x3D; 50;\n    int y &#x3D; 100;\n    Test t &#x3D; new Test();\n    int i &#x3D; t.returnMin(x,y);    &#x2F;&#x2F; x和y是实参\n    System.out.println(i);\n&#125;</code></pre>\n\n<p>方法的形参和实参具有以下特点：</p>\n<ul>\n<li>形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只有在方法内部有效，方法调用结束返回主调方法后则不能再使用该形参变量。</li>\n<li>实参可以是常量、变量、表达式、方法等，无论实参是何种类型的量，在进行方法调用时，它们都必须具有确定的值，以便把这些值传送给形参。因此应预先用赋值、输入等办法使实参获得确定值。</li>\n<li>实参和形参在数量、类型和顺序上应严格一致，否则会发生“类型不匹配” 的错误。</li>\n<li>方法调用中发生的数据传送是单向的，即只能把实参的值传送绐形参，而不能把形参的值反向地传送给实参。因此在方法调用过程中，形参的值发生改变，而实参中的值不会变化。</li>\n</ul>\n<p>在调用成员方法时应注意以下 4 点：</p>\n<ol>\n<li>对无参成员方法来说，是没有实际参数列表的（即没有 paramList），但方法名后的括号不能省略。</li>\n<li>对带参数的成员方法来说，实参的个数、顺序以及它们的数据类型必须与形式参数的个数、顺序以及它们的数据类型保持一致，各个实参间用逗号分隔。实参名与形参名可以相同，也可以不同。</li>\n<li>实参也可以是表达式，此时一定要注意使表达式的数据类型与形参的数据类型相同，或者使表达式的类型按 <a href=\"http://c.biancheng.net/java/\">Java</a> 类型转换规则达到形参指明的数据类型。</li>\n<li>实参变量对形参变量的数据传递是“值传递”，即只能由实参传递给形参，而不能由形参传递给实参。程序中执行到调用成员方法时，Java 把实参值复制到一个临时的存储区（栈）中，形参的任何修改都在栈中进行，当退出该成员方法时，Java 自动清除栈中的内容。</li>\n</ol>\n<h4 id=\"3-方法中的局部变量\"><a href=\"#3-方法中的局部变量\" class=\"headerlink\" title=\"3.方法中的局部变量\"></a>3.方法中的局部变量</h4><p>在方法体内可以定义本方法所使用的变量，这种变量是局部变量。它的生存期与作用域是在本方法内，也就是说，局部变量只能在本方法内有效或可见，离开本方法则这些变量将被自动释放。</p>\n<p>在方法体内定义变量时，变量前不能加修饰符。局部变量在使用前必须明确赋值，否则编译时会出错。另外，在一个方法内部，可以在复合语句（把多个语句用括号<code>&#123;&#125;</code>括起来组成的一个语句称复合语句）中定义变量，这些变量只在复合语句中有效。</p>\n<h3 id=\"e-this关键字\"><a href=\"#e-this关键字\" class=\"headerlink\" title=\"e.this关键字\"></a>e.this关键字</h3><p>​\t\tthis 关键字是 <a href=\"http://c.biancheng.net/java/\">Java</a> 常用的关键字，可用于任何实例方法内指向当前对象，也可指向对其调用当前方法的对象，或者在需要当前类型对象引用时使用。</p>\n<p>this的两种使用方法</p>\n<p>1.如果发生局部变量可以成员变量命名冲突时，可以通过this.成员变量名的方式区分实例变量和局部变量</p>\n<p>2.一个构造方法中需要调用同一个类的另一个构造方法，可以通过this()的方式调用，但this()必须要书写在第一行</p>\n<h4 id=\"this-属性名\"><a href=\"#this-属性名\" class=\"headerlink\" title=\"this.属性名\"></a>this.属性名</h4><p>通过this.成员变量名调用隐藏的成员变量</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Teacher &#123;\n    private String name;    &#x2F;&#x2F; 教师名称\n    private double salary;    &#x2F;&#x2F; 工资\n    private int age;    &#x2F;&#x2F; 年龄\n    public Teacher(String name,double salary,int age) &#123;\n    this.name &#x3D; name;    &#x2F;&#x2F; 设置教师名称\n    this.salary &#x3D; salary;    &#x2F;&#x2F; 设置教师工资\n    this.age &#x3D; age;    &#x2F;&#x2F; 设置教师年龄\n    &#125;\n&#125;</code></pre>\n\n<p>this([参数列表])调用本一个类的另外一个构造方法</p>\n<h4 id=\"this-方法名\"><a href=\"#this-方法名\" class=\"headerlink\" title=\"this.方法名\"></a>this.方法名</h4><h3 id=\"f-构造方法\"><a href=\"#f-构造方法\" class=\"headerlink\" title=\"f.构造方法\"></a>f.构造方法</h3><p>构造方法是类的一种特殊方法，用来初始化类的一个新的对象，在创建对象（new 运算符）之后自动调用。<a href=\"http://c.biancheng.net/java/\">Java</a> 中的每个类都有一个默认的构造方法，并且可以有一个以上的构造方法。</p>\n<p>Java 构造方法有以下特点：</p>\n<ul>\n<li>方法名必须与类名相同</li>\n<li>可以有 0 个、1 个或多个参数</li>\n<li>没有任何返回值，包括 void</li>\n<li>默认返回类型就是对象类型本身</li>\n<li>只能与 new 运算符结合使用</li>\n</ul>\n<p>构造方法主要有无参构造方法和有参构造方法两种</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class MyClass &#123;\n    private int m;    &#x2F;&#x2F; 定义私有变量\n    MyClass() &#123;\n        &#x2F;&#x2F; 定义无参的构造方法\n        m &#x3D; 0;\n    &#125;\n    MyClass(int m) &#123;\n        &#x2F;&#x2F; 定义有参的构造方法\n        this.m &#x3D; m;\n    &#125;\n&#125;</code></pre>\n\n<p>该示例定义了两个构造方法，分别是无参构造方法和有参构造方法。在一个类中定义多个具有不同参数的同名方法，这就是方法的重载。这两个构造方法的名称都与类名相同，均为 MyClass。在实例化该类时可以调用不同的构造方法进行初始化。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">注意：类的构造方法不是要求必须定义的。如果在类中没有定义任何一个构造方法，则 Java 会自动为该类生成一个默认的构造方法。默认的构造方法不包含任何参数，并且方法体为空。如果类中显式地定义了一个或多个构造方法，则 Java 不再提供默认构造方法。</code></pre>\n\n<p>要在不同的条件下使用不同的初始化行为创建类的对象，这时候就需要在一个类中创建多个构造方法。下面通过一个示例来演示构造方法的使用。</p>\n<h3 id=\"g-对象的创建\"><a href=\"#g-对象的创建\" class=\"headerlink\" title=\"g.对象的创建\"></a>g.对象的创建</h3><h4 id=\"1-直接通过对象操作属性赋值\"><a href=\"#1-直接通过对象操作属性赋值\" class=\"headerlink\" title=\"**1.**直接通过对象操作属性赋值\"></a>**1.**直接通过对象操作属性赋值</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">Car car1&#x3D;new Car(); \ncar1.brand&#x3D;&quot;大众CC&quot;; \ncar1.color&#x3D;&quot;黑色&quot;; \ncar1.money&#x3D;-30;&#x2F;&#x2F;直接赋值，数据不安全 \ncar1.carNumber&#x3D;&quot;赣Asv999&quot;;\ncar1.carGo();</code></pre>\n\n<h4 id=\"2-通过将属性封装，提高数据的安全性\"><a href=\"#2-通过将属性封装，提高数据的安全性\" class=\"headerlink\" title=\"2.通过将属性封装，提高数据的安全性\"></a>2.通过将属性封装，提高数据的安全性</h4><p>封装的定义：</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">将类中的某些信息(属性或方法)封装在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现 对隐藏信息的操作</code></pre>\n\n<p>步骤：1.将成员变量private私有化，将成员变量封装get、set方法分别来获取值和设置值</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private String brand;\n    private String color;\n    private int price;\n    private String numberPlate;\n\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n\n    public void setBrand(String brand) &#123;\n        this.brand &#x3D; brand;\n    &#125;\n\n    public String getColor() &#123;\n        return color;\n    &#125;\n\n    public void setColor(String color) &#123;\n        this.color &#x3D; color;\n    &#125;\n\n    public int getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(int price) &#123;\n        &#x2F;&#x2F;将业务处理隐藏在方法内部，对象调用的时候无需知道内部具体实现的细节，这就是封装的概念 \n        &#x2F;&#x2F;如果是负数就取用绝对值\n        this.price &#x3D; price;\n    &#125;\n\n    public String getNumberPlate() &#123;\n        return numberPlate;\n    &#125;\n\n    public void setNumberPlate(String numberPlate) &#123;\n        this.numberPlate &#x3D; numberPlate;\n    &#125;\n\n    public void showCarInfo()&#123;\n        System.out.println(&quot;汽车品牌:&quot;+brand+&quot;,汽车颜色&quot;+this.color+&quot;,汽车价格&quot;+this.price+&quot;,车牌号&quot;+this.numberPlate);\n    &#125;\n\n    public Car() &#123;\n    &#125;\n\n    public Car(String brand, String color, int price, String numberPlate) &#123;\n        this.brand &#x3D; brand;\n        this.color &#x3D; color;\n        this.price &#x3D; price;\n        this.numberPlate &#x3D; numberPlate;\n    &#125;</code></pre>\n\n<h4 id=\"3-构造方法初始化对象赋值\"><a href=\"#3-构造方法初始化对象赋值\" class=\"headerlink\" title=\"3.构造方法初始化对象赋值\"></a>3.构造方法初始化对象赋值</h4><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;&#x2F;通过构造方法创建对象并且初始化对象，而且还可以对业务进行封装，数据更安全！ \npublic Car(String brand, String color, int money, String carNumber) \n&#123; \n    this.brand &#x3D; brand; \n    this.color &#x3D; color; \n    if (money&lt;0) &#123; \n        this.money&#x3D; Math.abs(money); \n    &#125;else &#123; \n        this.money &#x3D; money; \n    &#125;this.carNumber &#x3D; carNumber; \n&#125;</code></pre>\n\n<h3 id=\"h-static关键字\"><a href=\"#h-static关键字\" class=\"headerlink\" title=\"h.static关键字\"></a>h.static关键字</h3><p>在类中，使用 static 修饰符修饰的属性（成员变量）称为静态变量，也可以称为类变量，常量称为静态常量，方法称为静态方法或类方法，它们统称为静态成员，归整个类所有。</p>\n<h4 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h4><p>类的成员变量可以分为以下两种：</p>\n<ol>\n<li>静态变量（或称为类变量），指被 static 修饰的成员变量。</li>\n<li>实例变量，指没有被 static 修饰的成员变量</li>\n</ol>\n<p>静态变量与实例变量的区别如下：</p>\n<p>1）静态变量</p>\n<ul>\n<li>运行时，Java 虚拟机只为静态变量分配一次内存，在加载类的过程中完成静态变量的内存分配。</li>\n<li>在类的内部，可以在任何方法内直接访问静态变量。</li>\n<li>在其他类中，可以通过类名访问该类中的静态变量。</li>\n</ul>\n<p>2）实例变量</p>\n<ul>\n<li>每创建一个实例，Java 虚拟机就会为实例变量分配一次内存。</li>\n<li>在类的内部，可以在非静态方法中直接访问实例变量。</li>\n<li>在本类的静态方法或其他类中则需要通过类的实例对象进行访问。</li>\n</ul>\n<p>静态变量在类中的作用如下：</p>\n<ul>\n<li>静态变量可以被类的所有实例共享，因此静态变量可以作为实例之间的共享数据，增加实例之间的交互性。</li>\n<li>如果类的所有实例都包含一个相同的常量属性，则可以把这个属性定义为静态常量类型，从而节省内存空间。例如，在类中定义一个静态常量 PI。</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static double PI &#x3D; 3.14159256;</code></pre>\n\n<h4 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h4><p>与成员变量类似，成员方法也可以分为以下两种：</p>\n<ol>\n<li>静态方法（或称为类方法），指被 static 修饰的成员方法。</li>\n<li>实例方法，指没有被 static 修饰的成员方法。</li>\n</ol>\n<p>静态方法与实例方法的区别如下：</p>\n<ul>\n<li>静态方法不需要通过它所属的类的任何实例就可以被调用，因此在静态方法中不能使用 this 关键字，也不能直接访问所属类的实例变量和实例方法，但是可以直接访问所属类的静态变量和静态方法。另外，和 this 关键字一样，super 关键字也与类的特定实例相关，所以在静态方法中也不能使用 super 关键字。</li>\n<li>在实例方法中可以直接访问所属类的静态变量、静态方法、实例变量和实例方法。</li>\n</ul>\n<h3 id=\"i-权限修饰符\"><a href=\"#i-权限修饰符\" class=\"headerlink\" title=\"i.权限修饰符\"></a>i.权限修饰符</h3><p>访问修饰符可以用于修饰属性和方法，用于定义属性和方法的访问权限</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>本类</th>\n<th>本包</th>\n<th>子类</th>\n<th>其他包</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>private(私有的)</td>\n<td>OK</td>\n<td>NO</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>default(默认不写)</td>\n<td>OK</td>\n<td>OK</td>\n<td>NO</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>protected(受保护的)</td>\n<td>OK</td>\n<td>OK</td>\n<td>OK(有继承关系的其他包也可以用)</td>\n<td>NO</td>\n</tr>\n<tr>\n<td>public(公有的)</td>\n<td>OK</td>\n<td>OK</td>\n<td>OK</td>\n<td>OK</td>\n</tr>\n</tbody></table>\n<p>&#x3D;&#x3D;权限从小到大: private&lt;默认不写&lt;protected&lt;public公有的&#x3D;&#x3D;</p>\n<h2 id=\"C-特性\"><a href=\"#C-特性\" class=\"headerlink\" title=\"C.特性\"></a>C.特性</h2><h3 id=\"a-继承性\"><a href=\"#a-继承性\" class=\"headerlink\" title=\"a.继承性\"></a>a.继承性</h3><p>程序中的继承性是指子类拥有父类的全部特征和行为，这是类之间的一种关系。Java 只支持单继承。即只能有一个父类，但 Java 可以实现多个接口（接口类似于类，但接口的成员没有执行体。可以防止多继承所引起的冲突问题。</p>\n<p>使用这种层次形的分类方式，是为了将多个类的通用属性和方法提取出来，放在它们的父类中，然后只需要在子类中各自定义自己独有的属性和方法，并以继承的形式在父类中获取它们的通用属性和方法即可。</p>\n<h3 id=\"b-封装性\"><a href=\"#b-封装性\" class=\"headerlink\" title=\"b.封装性\"></a>b.封装性</h3><p>封装是将代码及其处理的数据绑定在一起的一种编程机制，该机制保证了程序和数据都不受外部干扰且不被误用。封装的目的在于保护信息，使用它的主要优点如下。</p>\n<ul>\n<li>保护类中的信息，它可以阻止在外部定义的代码随意访问内部代码和数据。</li>\n<li>隐藏细节信息，一些不需要程序员修改和使用的信息，比如取款机中的键盘，用户只需要知道按哪个键实现什么操作就可以，至于它内部是如何运行的，用户不需要知道。</li>\n<li>有助于建立各个系统之间的松耦合关系，提高系统的独立性。当一个系统的实现方式发生变化时，只要它的接口不变，就不会影响其他系统的使用。例如 U 盘，不管里面的存储方式怎么改变，只要 U 盘上的 USB 接口不变，就不会影响用户的正常操作。</li>\n<li>提高软件的复用率，降低成本。每个系统都是一个相对独立的整体，可以在不同的环境中得到使用。例如，一个 U 盘可以在多台电脑上使用。</li>\n</ul>\n<p>Java 语言的基本封装单位是类。由于类的用途是封装复杂性，所以类的内部有隐藏实现复杂性的机制。Java 提供了私有和公有的访问模式，类的公有接口代表外部的用户应该知道或可以知道的每件东西，私有的方法数据只能通过该类的成员代码来访问，这就可以确保不会发生不希望的事情。</p>\n<h3 id=\"c-多态性\"><a href=\"#c-多态性\" class=\"headerlink\" title=\"c.多态性\"></a>c.多态性</h3><p>面向对象的多态性，即“一个接口，多个方法”。多态性体现在父类中定义的属性和方法被子类继承后，可以具有不同的属性或表现方式。多态性允许一个接口被多个同类使用，弥补了单继承的不足。</p>\n<h1 id=\"七：方法\"><a href=\"#七：方法\" class=\"headerlink\" title=\"七：方法\"></a>七：方法</h1><h2 id=\"A-定义-2\"><a href=\"#A-定义-2\" class=\"headerlink\" title=\"A.定义\"></a>A.定义</h2><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">把代码逻辑细节用方法封装起来，通过对象能够重复调用方法，实现代码复用，提高工作效率</code></pre>\n\n<h2 id=\"B-方法种类\"><a href=\"#B-方法种类\" class=\"headerlink\" title=\"B.方法种类\"></a>B.方法种类</h2><p>返回值： 有返回值的、无返回值的</p>\n<p>参数：有参的、无参数的</p>\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">1.无返回值无参方法 \n   2.无返回值有参方法 \n   3.有返回值无参方法 \n   4.有返回值有参方法</code></pre>\n\n<h3 id=\"案例1：\"><a href=\"#案例1：\" class=\"headerlink\" title=\"案例1：\"></a>案例1：</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public void jisuan() &#123; \n    Scanner input&#x3D;new Scanner(System.in);\n    System.out.print(&quot;请输入语文成绩:&quot;);\n    int yuwen&#x3D;input.nextInt(); \n    System.out.print(&quot;请输入数学成绩:&quot;); \n    int shuxue&#x3D;input.nextInt(); \n    System.out.print(&quot;请输入英语成绩:&quot;); \n    int yingyu&#x3D;input.nextInt(); \n    &#x2F;&#x2F;平均分 \n    int avg&#x3D;(yuwen+shuxue+yingyu)&#x2F;3; \n    System.out.println(&quot;三门课程的平均分是:&quot;+avg); &#125;</code></pre>\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;**\n*需求： \n*在测试类调用计算的方法，得到语文、数学、英语的三门课程的平均分 \n*\n*&#x2F; \npublic class Test &#123; \n    public static void main(String[] args) &#123; \n        Admin admin&#x3D;new Admin(); \n        &#x2F;&#x2F;调用无返回值无参数方法 \n        admin.jisuan(); \n    &#125; \n&#125;</code></pre>\n\n<h3 id=\"案例2：\"><a href=\"#案例2：\" class=\"headerlink\" title=\"案例2：\"></a>案例2：</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Admin &#123; \n    &#x2F;**\n    * 有返回值无参数的方法 \n    * @return \n    *&#x2F; \n    public int jisuan() &#123; \n        Scanner input&#x3D;new Scanner(System.in); \tSystem.out.print(&quot;请输入语文成绩:&quot;); int yuwen&#x3D;input.nextInt(); System.out.print(&quot;请输入数学成绩:&quot;); int shuxue&#x3D;input.nextInt(); System.out.print(&quot;请输入英语成绩:&quot;); int yingyu&#x3D;input.nextInt(); \n        &#x2F;&#x2F;平均分 \n        int avg&#x3D;(yuwen+shuxue+yingyu)&#x2F;3; \n        return avg; \n    &#125; \n&#125;\npublic class Test &#123; \n    static void main(String[] args) &#123; \n        Admin admin&#x3D;new Admin(); \n        &#x2F;&#x2F;调用有返回值无参方法 \n        int avgScore&#x3D; admin.jisuan(); \n        System.out.println(&quot;三门课程的平均分是:&quot;+avgScore); \n    &#125; \n&#125;</code></pre>\n\n<h3 id=\"案例3：\"><a href=\"#案例3：\" class=\"headerlink\" title=\"案例3：\"></a>案例3：</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Admin &#123; \n    &#x2F;**\n    *\n    * 无返回值有参数方法 \n    * 接受参数的这方叫形式参数(形参) \n    *&#x2F; \n    public void jisuan(int yuwen, int shuxue, int yingyu) &#123;\n        int avg&#x3D;(yuwen+shuxue+yingyu)&#x2F;3; \n        System.out.println(&quot;三门课程的平均分是:&quot;+avg); \n    &#125; \n&#125;\n&#x2F;**\n* 需求： 在测试类调用计算的方法，得到语文、数学、英语的三门课程的平均分 *\n*&#x2F; \npublic class Test &#123;\n    public static void main(String[] args) &#123; \n    \tScanner input &#x3D; new Scanner(System.in); \n    \tSystem.out.print(&quot;请输入语文成绩:&quot;); \n    \tint yuwen &#x3D; input.nextInt(); \n   \t \tSystem.out.print(&quot;请输入数学成绩:&quot;); \n    \tint shuxue &#x3D; input.nextInt(); \n    \tSystem.out.print(&quot;请输入英语成绩:&quot;); \n    \tint yingyu &#x3D; input.nextInt(); \n    \tAdmin admin &#x3D; new Admin(); \n    \t&#x2F;&#x2F;调用无返回值有参方法 \n    \t&#x2F;&#x2F;具体传递值的叫实际参数(实参) \n   \t\tadmin.jisuan(yuwen,shuxue,yingyu);\n        &#125; \n&#125;</code></pre>\n\n<h2 id=\"C-值传递和引用类型传递【重要】\"><a href=\"#C-值传递和引用类型传递【重要】\" class=\"headerlink\" title=\"C.值传递和引用类型传递【重要】\"></a>C.值传递和引用类型传递【重要】</h2><h3 id=\"1-值类型案例\"><a href=\"#1-值类型案例\" class=\"headerlink\" title=\"1.值类型案例\"></a>1.值类型案例</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Admin &#123; \n    &#x2F;&#x2F;两值交换 \n    public void change(int a, int b) &#123; \n        int c&#x3D;a; a&#x3D;b; b&#x3D;c; \n        System.out.println(&quot;交换：a:&quot;+a+&quot;,b:&quot;+b);\n    &#125; \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;**\n*值传递 \n* @author Administrator \n*\n*&#x2F; \npublic class Test &#123; \n    public static void main(String[] args) &#123; \n    int a&#x3D;5; \n    int b&#x3D;10; \n    Admin admin&#x3D;new Admin(); \n    &#x2F;&#x2F;基本数据类型为参数，是值传递，是将值赋值一份给形参，当形参的值发生了改变，实参的值不变 \n    admin.change(a,b);&#x2F;&#x2F; \n    System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b);&#x2F;&#x2F;结果5,10 \n&#125;&#125;</code></pre>\n\n<h3 id=\"2-引用类型传递\"><a href=\"#2-引用类型传递\" class=\"headerlink\" title=\"2.引用类型传递\"></a>2.引用类型传递</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Arrays &#123; \n    &#x2F;**\n    * static修饰的方法叫类方法或者叫静态方法 \n    * 类方法属于类，可以通过类名直接调用，一般工具方法都是这样用比较方便 \n    * @param score \n    *&#x2F; \n    public static void sortByDesc(int[] score) &#123; \n        for (int i &#x3D; 0; i &lt; score.length-1; i++) &#123; \n            for (int j &#x3D; 0; j &lt; score.length-i-1; j++) &#123;\n                if (score[j]&lt;score[j+1]) &#123; \n                    int temp&#x3D;score[j]; \n                    score[j]&#x3D;score[j+1]; \n                    score[j+1]&#x3D;temp; \n                &#125; \n            &#125; \n        &#125; \n    &#125; \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">&#x2F;**\n* 引用类型传递值 \n*\n*&#x2F; \npublic class Test &#123; \n    public static void main(String[] args) &#123; \n        int score[]&#x3D; &#123;3,45,6,67,1&#125;;\n        &#x2F;&#x2F; Arrays.sort(score); \n        &#x2F;&#x2F;数组、对象、集合、接口、类都是引用类型！ \n        &#x2F;&#x2F;以数组为实参，是引用类型传递，是将score数组的地址复制了一份给形参 \n        &#x2F;&#x2F;当形参指引到的数组的值发生了改变，因为实参和形参的地址是同一个，所以实参的值也会改变！ \n        Arrays.sortByDesc(score); \n        for (int i : score) &#123; \n            System.out.print(&quot; &quot;+i); \n        &#125;\n    &#125; \n&#125;</code></pre>\n\n<h1 id=\"八：方法重写和方法重载\"><a href=\"#八：方法重写和方法重载\" class=\"headerlink\" title=\"八：方法重写和方法重载\"></a>八：方法重写和方法重载</h1><h2 id=\"A-方法重载Overload【重要】\"><a href=\"#A-方法重载Overload【重要】\" class=\"headerlink\" title=\"A.方法重载Overload【重要】\"></a>A.方法重载Overload【重要】</h2><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">在同一个类中，多个方法名相同，但是参数的个数、类型、顺序不同，叫方法重载，与返回类型无关 方法重载各个重名的方法之间没有任何联系，只是叫同一个方法名而已，像构造方法必须和类名一致有时候需 要多个构造方法，所以叫构造方法重载。</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public class Student &#123; \n    String name;&#x2F;&#x2F;姓名 \n    int age;&#x2F;&#x2F;年龄 \n    char sex;&#x2F;&#x2F;性别 \n    String studentNo;&#x2F;&#x2F;学号 \n    double price;&#x2F;&#x2F;学费 \n    public Student() &#123;&#125; \n    public Student(String name, int age, char sex) &#123; \n        super(); \n        this.name &#x3D; name; \n        this.age &#x3D; age; \n        this.sex &#x3D; sex; \n    &#125;\n    &#x2F;&#x2F;构造方法的常见体现：构造方法重载 \n    public Student(String name, int age, char sex, String studentNo, double price) &#123;\n        this.name &#x3D; name; \n        this.age &#x3D; age; \n        this.sex &#x3D; sex; \n        this.studentNo &#x3D; studentNo;\n        this.price &#x3D; price; \n    &#125;\n    public void study()&#123; \n        System.out.println(&quot;学生学习！&quot;); \n    &#125;\n    &#x2F;&#x2F;在一个类中，多个方法名相同，参数的个数、顺序、类型不同，叫方法重载，与返回类型无关 \n    public void study(String name)&#123; \n        System.out.println(name+&quot;学生学习！&quot;); \n    &#125;\n    public static void main(String[] args) &#123; \n        &#x2F;&#x2F;具体调用本类中哪个方法具体看方法的参数！\n        new Student().study(); \n        new Student().study(&quot;狗剩&quot;);\n        String str&#x3D;&quot;我是江西老表&quot;; &#x2F;&#x2F;字符串截取 \n        String str2&#x3D;str.substring(2); \n        System.out.println(str2); \n        String str3&#x3D;str.substring(2,4); \n        System.out.println(str3);\n    &#125;\n&#125;</code></pre>\n\n<h2 id=\"B-方法重写Override【重要】\"><a href=\"#B-方法重写Override【重要】\" class=\"headerlink\" title=\"B.方法重写Override【重要】\"></a>B.方法重写Override【重要】</h2><p>&#x3D;&#x3D;注意：我们所有的类都是继承于Object父类，&#x3D;&#x3D;父类也可以叫基类或者超类。子类继承于父类，当子类和父类的方法一致并且内容做了覆盖，叫做方法重写！</p>\n<h3 id=\"1-重写object类的toString方法\"><a href=\"#1-重写object类的toString方法\" class=\"headerlink\" title=\"1.重写object类的toString方法\"></a>1.重写object类的toString方法</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Student &#123; \n    String name;&#x2F;&#x2F;姓名 \n    int age;&#x2F;&#x2F;年龄 \n    char sex;&#x2F;&#x2F;性别 \n    String studentNo;&#x2F;&#x2F;学号 \n    double price;&#x2F;&#x2F;学费 \n    &#x2F;&#x2F;构造方法的常见体现：构造方法重载 \n    public Student(String name, int age, char sex, String studentNo, double price) &#123;\n        this.name &#x3D; name; \n        this.age &#x3D; age; \n        this.sex &#x3D; sex; \n        this.studentNo &#x3D; studentNo; \n        this.price &#x3D; price; \n    &#125;\n    &#x2F;&#x2F;重写了Object类的toString方法 \n    &#x2F;&#x2F;子类如果和父类方法一致，只是具体实现内容不一样，叫方法重写或者叫方法覆盖 \n    &#x2F;&#x2F;优势：扩展性更强！ \n    @Override \n    public String toString() &#123; \n        return &quot;Student属性:[name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age + &quot;, sex&#x3D;&quot; + sex + &quot;, studentNo&#x3D;&quot; + studentNo + &quot;, price&#x3D;&quot; + price + &quot;]&quot;; \n    &#125; \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Test &#123; \n    public static void main(String[] args) &#123; \n        Student stu2&#x3D;new Student(&quot;张三&quot;,21,&#39;男&#39;,&quot;S0001&quot;,1000); \n        System.out.println(stu2.toString()); \n    &#125; \n&#125;</code></pre>\n\n<h3 id=\"2-重写Object类的equals方法\"><a href=\"#2-重写Object类的equals方法\" class=\"headerlink\" title=\"2.重写Object类的equals方法\"></a>2.重写Object类的equals方法</h3><pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Teacher &#123; \n    String name;&#x2F;&#x2F;称呼 \n    int code;&#x2F;&#x2F;身份证号码\n    public Teacher(String name, int code) &#123; \n        super(); \n        this.name &#x3D; name; \n        this.code &#x3D; code; \n    &#125;\n    &#x2F;**\n    * 重写Object父类的equals方法，如果编号一致就返回true \n    *&#x2F; \n    @Override \n    public boolean equals(Object obj) &#123; \n        &#x2F;&#x2F;如果两个对象地址一致，返回true \n        if (this&#x3D;&#x3D;obj) &#123; return true; &#125;\n        &#x2F;&#x2F;将父类类型用子类类型接收，需要向下转型 \n        Teacher t&#x3D;(Teacher) obj; \n        if (this.code&#x3D;&#x3D;t.code) \n        &#123; \n            &#x2F;&#x2F;判断两个对象的属性code员工编号一致，那么就返回true \n            return true; \n        &#125;else &#123; return false; &#125; \n    &#125; \n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JAVA\" data-language=\"JAVA\"><code class=\"language-JAVA\">public class Test &#123; \n    public static void main(String[] args) &#123; \n        Teacher teacher1&#x3D;new Teacher(&quot;棋哥&quot;,10001); \n        Teacher teacher2&#x3D;new Teacher(&quot;老彭&quot;,10001);\n &#x2F;&#x2F;System.out.println(teacher1.equals(teacher2));&#x2F;&#x2F;false \n        &#x2F;&#x2F;需求：根据身份证编号来判断这两个对象是同一个人！ \n        &#x2F;&#x2F;Object类的equals方法底层是比较地址，显然不能满足我们的需求，如何解决？-&gt;重写Object的 equals方法 \n        System.out.println(teacher1.equals(teacher2));&#x2F;&#x2F;true \n    &#125; \n   \n&#125;</code></pre>\n\n","feature":true,"text":"JavaSE基础 一：Java入门A.安装eclipse目前市面上常用的集成开发环境(IDE)有： 1.eclipse 免费 官网推荐 解压版 2.myeclipse 插件版，可以生成很多功能，付费，现在用的几乎很少 3.IntelliJ IDEA 智能提示很强大，付费 目前市面...","link":"","photos":[],"count_time":{"symbolsCount":"56k","symbolsTime":"51 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":3,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"基础","slug":"基础","count":1,"path":"api/tags/基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%EF%BC%9AJava%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">一：Java入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%AE%89%E8%A3%85eclipse\"><span class=\"toc-text\">A.安装eclipse</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E5%AE%89%E8%A3%85jdk\"><span class=\"toc-text\">B.安装jdk</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-jdk%E3%80%81jre%E3%80%81jvm%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">1.jdk、jre、jvm的区别：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%8E%BB%E5%AE%98%E7%BD%91%E5%8E%BB%E4%B8%8B%E8%BD%BDJDK\"><span class=\"toc-text\">2.去官网去下载JDK</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AE%89%E8%A3%85jdk\"><span class=\"toc-text\">3.安装jdk</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">4.配置环境变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">C.开发项目</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D-%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">D.更改字体大小</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#E-%E5%BC%80%E5%8F%91%E7%A8%8B%E5%BA%8F%E7%9A%843%E4%B8%AA%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">E.开发程序的3个步骤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#F-%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">F.注释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%B3%A8%E9%87%8A%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.注释的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B3%A8%E9%87%8A%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">2.注释分类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#G-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">G.转义字符</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%EF%BC%9A%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">二：变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">A.定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">B.数据类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99\"><span class=\"toc-text\">C.变量命名规则</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D-%E5%8F%98%E9%87%8F%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">D.变量种类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">1.局部变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2.全局变量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.静态变量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#E-%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">E.数据转换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#F-%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">F.控制台输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#G-%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">G.运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">a.算术运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">b.条件运算符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">c.逻辑运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A-amp-%E5%92%8C-amp-amp-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">面试题：&amp;和&amp;&amp;的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#d-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">d.赋值运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%9A-x3D-x3D-%E5%92%8C-x3D-%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F\"><span class=\"toc-text\">面试题：&#x3D;&#x3D;和&#x3D;的区别？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#e-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%89\"><span class=\"toc-text\">e.三目运算符（三元运算符）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#f-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">f.位运算符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#H-%E5%80%BC%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">H.值比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#I-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">I.常量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#J-Bigdecimal%E7%B2%BE%E5%AF%86%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">J.Bigdecimal精密计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">a.概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">b.常用构造函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E7%94%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">1.常用构造函数</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2.使用问题分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3\"><span class=\"toc-text\">c.常用方法详解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.常用方法</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">2.大小比较</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#d-BigDecimal%E6%A0%BC%E5%BC%8F%E5%8C%96\"><span class=\"toc-text\">d.BigDecimal格式化</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#e-BigDecimal%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">e.BigDecimal常见异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%99%A4%E6%B3%95%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">除法的时候出现异常</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#f-BigDecimal%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">f.BigDecimal总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">1.总结</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%8E%A8%E8%8D%90\"><span class=\"toc-text\">2.工具类推荐</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#K-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">K.上机作业</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%EF%BC%9A%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">三：选择结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-if%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">A.if结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E7%AE%80%E5%8D%95if\"><span class=\"toc-text\">a.简单if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E5%A4%9A%E9%87%8Dif\"><span class=\"toc-text\">b.多重if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-%E5%B5%8C%E5%A5%97if\"><span class=\"toc-text\">c.嵌套if</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-switch%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">B.switch结构</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A\"><span class=\"toc-text\">C.上机作业</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95\"><span class=\"toc-text\">D.代码调试</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%EF%BC%9A%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">四：循环结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%AE%9A%E4%B9%89-1\"><span class=\"toc-text\">A.定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E5%BE%AA%E7%8E%AF%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">B.循环分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">1.while循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-do-while%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">2.do-while循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">3.for循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E5%8A%A0%E5%BC%BAfor%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">4.加强for循环</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">C.关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-break%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">1.break关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-continue%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">2.continue关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-return\"><span class=\"toc-text\">3.return</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#D-i-%E5%92%8C-i%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">D.i++和++i的区别</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%EF%BC%9A%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">五：数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">A.声明数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">B.创建数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-Arrays%E7%B1%BB\"><span class=\"toc-text\">C.Arrays类</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AD%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">六：面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">A.基本概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">B.对象的概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">a.类和对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">b.类的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">c.类的属性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#d-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">d.成员方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">1.成员方法的返回值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%BD%A2%E5%8F%82%E3%80%81%E5%AE%9E%E5%8F%82%E5%8F%8A%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">2.形参、实参及成员方法的调用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%96%B9%E6%B3%95%E4%B8%AD%E7%9A%84%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.方法中的局部变量</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#e-this%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">e.this关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#this-%E5%B1%9E%E6%80%A7%E5%90%8D\"><span class=\"toc-text\">this.属性名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#this-%E6%96%B9%E6%B3%95%E5%90%8D\"><span class=\"toc-text\">this.方法名</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#f-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">f.构造方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#g-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">g.对象的创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%9B%B4%E6%8E%A5%E9%80%9A%E8%BF%87%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">**1.**直接通过对象操作属性赋值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E9%80%9A%E8%BF%87%E5%B0%86%E5%B1%9E%E6%80%A7%E5%B0%81%E8%A3%85%EF%BC%8C%E6%8F%90%E9%AB%98%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7\"><span class=\"toc-text\">2.通过将属性封装，提高数据的安全性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%B9%E8%B1%A1%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">3.构造方法初始化对象赋值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#h-static%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">h.static关键字</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">静态变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">静态方法</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#i-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6\"><span class=\"toc-text\">i.权限修饰符</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">C.特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#a-%E7%BB%A7%E6%89%BF%E6%80%A7\"><span class=\"toc-text\">a.继承性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#b-%E5%B0%81%E8%A3%85%E6%80%A7\"><span class=\"toc-text\">b.封装性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#c-%E5%A4%9A%E6%80%81%E6%80%A7\"><span class=\"toc-text\">c.多态性</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%83%EF%BC%9A%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">七：方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E5%AE%9A%E4%B9%89-2\"><span class=\"toc-text\">A.定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E6%96%B9%E6%B3%95%E7%A7%8D%E7%B1%BB\"><span class=\"toc-text\">B.方法种类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B1%EF%BC%9A\"><span class=\"toc-text\">案例1：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B2%EF%BC%9A\"><span class=\"toc-text\">案例2：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B3%EF%BC%9A\"><span class=\"toc-text\">案例3：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%80%BC%E4%BC%A0%E9%80%92%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BC%A0%E9%80%92%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91\"><span class=\"toc-text\">C.值传递和引用类型传递【重要】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">1.值类型案例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">2.引用类型传递</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%AB%EF%BC%9A%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%E5%92%8C%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">八：方法重写和方法重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#A-%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BDOverload%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91\"><span class=\"toc-text\">A.方法重载Overload【重要】</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#B-%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99Override%E3%80%90%E9%87%8D%E8%A6%81%E3%80%91\"><span class=\"toc-text\">B.方法重写Override【重要】</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E9%87%8D%E5%86%99object%E7%B1%BB%E7%9A%84toString%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.重写object类的toString方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E9%87%8D%E5%86%99Object%E7%B1%BB%E7%9A%84equals%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">2.重写Object类的equals方法</span></a></li></ol></li></ol></li></ol>","author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}},"mapped":true,"prev_post":{"title":"JDK安装","uid":"4caa8f7146e3e8b2e123c26d479cc8c0","slug":"JDK安装","date":"2022-06-27T10:19:58.000Z","updated":"2022-06-27T11:26:46.543Z","comments":true,"path":"api/articles/JDK安装.json","keywords":null,"cover":[],"text":" 1.jdk、jre、jvm的区别： jDK：Java Development kit java开发工具包，它提供了几千个类库的源码给我们，我们基于jdk提 供的开发环境去开发我们的代码，目前我们用的jdk1.8就是我们说的java8。 JRE: java runtime Env...","link":"","photos":[],"count_time":{"symbolsCount":603,"symbolsTime":"1 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":3,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"Java","slug":"Java","count":3,"path":"api/tags/Java.json"},{"name":"环境安装","slug":"环境安装","count":2,"path":"api/tags/环境安装.json"}],"author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}},"feature":true},"next_post":{}}