{"title":"01_数据库概述","uid":"8e2e42fcbf9545b68c314622ac8319e6","slug":"MySQL8/基础篇/01_数据库概述","date":"2022-07-22T07:18:39.000Z","updated":"2022-07-23T09:01:03.898Z","comments":true,"path":"api/articles/MySQL8/基础篇/01_数据库概述.json","keywords":"Java study learn 学习","cover":[],"content":"<h1 id=\"第01章-数据库概述\"><a href=\"#第01章-数据库概述\" class=\"headerlink\" title=\"第01章_数据库概述\"></a>第01章_数据库概述</h1><span id=\"more\"></span>\n\n<h2 id=\"1-为什么要使用数据库\"><a href=\"#1-为什么要使用数据库\" class=\"headerlink\" title=\"1.为什么要使用数据库\"></a>1.为什么要使用数据库</h2><ul>\n<li>持久化(persistence):<font color=\"red\">把数据保存在可掉电式存储设备中以供之后使用。</font>大多数情况下，特别是企业级应用，<font color=\"red\">数据持久化意味着将内存中的数据保存到硬盘上加以”固化“</font>，而持久化的实现过程大多通过各种关系数据库来完成。</li>\n<li>持久化的主要作用是<font color='red'>将内存中的数据存储在关系型数据库中</font>，当然也可以存储在磁盘文件、XML数据文件中。</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu1.png\"></p>\n<h2 id=\"2-数据库与数据库管理系统\"><a href=\"#2-数据库与数据库管理系统\" class=\"headerlink\" title=\"2.数据库与数据库管理系统\"></a>2.数据库与数据库管理系统</h2><h3 id=\"2-1-数据库的相关概念\"><a href=\"#2-1-数据库的相关概念\" class=\"headerlink\" title=\"2.1 数据库的相关概念\"></a>2.1 数据库的相关概念</h3><table>\n<thead>\n<tr>\n<th><strong><font color=\"red\">DB:数据库（Database）</font></strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>存储数据的“仓库”，本质上是一个文件系统，保存了一系列有组织的数据</td>\n</tr>\n<tr>\n<td><strong><font color=\"red\">DBMS:数据库管理软件（Database Mnagement System）</font></strong></td>\n</tr>\n<tr>\n<td>一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库种表内的数据</td>\n</tr>\n<tr>\n<td><strong><font color=\"red\">SQL:结构化查询语句（Seructured Query Language）</font></strong></td>\n</tr>\n<tr>\n<td>专门用来与数据库通信的语言</td>\n</tr>\n</tbody></table>\n<p><img src=\"/post/2022/07/null/tu7.png\"></p>\n<h3 id=\"2-2-数据库与数据库管理系统的关系\"><a href=\"#2-2-数据库与数据库管理系统的关系\" class=\"headerlink\" title=\"2.2 数据库与数据库管理系统的关系\"></a>2.2 数据库与数据库管理系统的关系</h3><p>数据库管理系统（DBMS）可以管理多个数据库，一般开发人员会针对每个应用创建一个数据库，为保存应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p>\n<p>数据库管理系统、数据库和表的关系如图：</p>\n<p><img src=\"/post/2022/07/null/tu2.png\"></p>\n<h3 id=\"2-3-常见的数据库管理系统排名（DBMS）\"><a href=\"#2-3-常见的数据库管理系统排名（DBMS）\" class=\"headerlink\" title=\"2.3 常见的数据库管理系统排名（DBMS）\"></a>2.3 常见的数据库管理系统排名（DBMS）</h3><p>目前常见的数据库管理软件有MySQL、Oracle、MS SQL Server、DB2、PostgreSQL、Access、Sybase、Indormix这几种。</p>\n<p>查看数据库最新排名：<a href=\"https://db-engines.com/en/ranking\">https://db-engines.com/en/ranking</a></p>\n<p><img src=\"/post/2022/07/null/tu11.png\"></p>\n<p>对应的走势图：<a href=\"https://db-engines.com/en/ranking_trend\">https://db-engines.com/en/ranking_trend</a></p>\n<p><img src=\"/post/2022/07/null/tu12.png\"></p>\n<h3 id=\"2-4-常见数据库介绍\"><a href=\"#2-4-常见数据库介绍\" class=\"headerlink\" title=\"2.4  常见数据库介绍\"></a>2.4  常见数据库介绍</h3><h4 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a>Oracle</h4><p>1979年，Oracle2诞生，它是第一个商用的RDBMS（关系型数据库管理系统）。随着Oracle软件的名气越来越大，公司也改名叫Oracle公司。</p>\n<p>2007年，总计85亿美金收购BEA Systems.</p>\n<p>2009年，总计74亿美金收购SUN。此前的2008年，SUN以10亿美金收购MySQL。意味着Oracle同时拥有了MySQL的管理权，至此Oracle在数据库领域中成为绝对的领导者。</p>\n<p>2013年，甲骨文超越IBM,成为继Microsoft后全球第二大软件公司。</p>\n<p>如今Oracle的年收入达到了400亿美金，足以证明商用（收费）数据库软件的价值。</p>\n<h4 id=\"SQL-Server\"><a href=\"#SQL-Server\" class=\"headerlink\" title=\"SQL Server\"></a>SQL Server</h4><p>SQL Server是微软开发的大型商业数据库，诞生于1989年，C#、.net等语言常使用，与winNT完全集成，也可以很好地与Microsoft BackOffice产品集成。</p>\n<h4 id=\"DB2\"><a href=\"#DB2\" class=\"headerlink\" title=\"DB2\"></a>DB2</h4><p>IBM公司的数据库产品，收费，常应用于银行系统种。</p>\n<h4 id=\"PostgreSQL\"><a href=\"#PostgreSQL\" class=\"headerlink\" title=\"PostgreSQL\"></a>PostgreSQL</h4><p>PostgreSQL的稳定性极强，最符合SQL标准，开放源码，具备商业级DBMS质量。PG对数据量大的文本以及SQL处理较快。</p>\n<h4 id=\"SyBase\"><a href=\"#SyBase\" class=\"headerlink\" title=\"SyBase\"></a>SyBase</h4><p>已经淡出历史舞台，提供了非常专业的数据建模的工具PowerDesigner</p>\n<h4 id=\"SQLite\"><a href=\"#SQLite\" class=\"headerlink\" title=\"SQLite\"></a>SQLite</h4><p>嵌入式的小型数据库，应用在手机端，零配置，SQlite3不用安装，不用配置，不用启动，关闭或配置数据库实例，当数据库崩溃后不用做任何恢复操作，在下次使用数据库时自动恢复</p>\n<h4 id=\"informix\"><a href=\"#informix\" class=\"headerlink\" title=\"informix\"></a>informix</h4><p>IBM公司出品，取自information和Unix的结合，他是第一个移植到Linux上的商业数据库产品，仅运行于unix&#x2F;linux平台，命令行操作。性能较高，支持集群，适用于安全性要求极高的系统，尤其是银行，证券系统的应用</p>\n<h2 id=\"3-MySQL介绍\"><a href=\"#3-MySQL介绍\" class=\"headerlink\" title=\"3.MySQL介绍\"></a>3.MySQL介绍</h2><p><img src=\"/post/2022/07/null/tu3.png\"></p>\n<h3 id=\"3-1概述\"><a href=\"#3-1概述\" class=\"headerlink\" title=\"3.1概述\"></a>3.1概述</h3><ul>\n<li>MySQL是一个<font color=\"#d88a00\"><code>开放源代码的关系型数据库管理系统</code></font>，由瑞典MySQL AB(创始人Michael Widenius)公司1995年开发，迅速成为开源数据库的No.1</li>\n<li>2008被<font color=\"#d88a00\">Sun</font>收购(10亿美金)，2009年<font color=\"#d88a00\">Sun</font>被<font color=\"#d88a00\">Oracle</font>收购。<font color=\"#d88a00\">MariaDB</font>应运而生,（MySQL的创造者担心MySQL有闭源的风险，因此创建了MySQL的分支项目MariaDB)</li>\n<li>MySQL6.x版本之后分为<font color=\"#d88a00\">社区版</font>和<font color=\"#d88a00\">商业版</font>。</li>\n<li>MySQL是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li>\n<li>MySQL是开源的，所以你不需要支付额外的费用。</li>\n<li>MySQL是可以定制的，采用了<font color=\"#d88a00\">GPL(GNU Genera1 Public License)</font>协议，你可以修改源码来开发自己的MySQL系统</li>\n<li>MySQL支持大型的数据库，可以处理永远上千万条记录的大型数据库</li>\n<li>MySQL支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持<font color=\"#d88a00\">4GB</font>,64位系统支持最大的表文件为<font color=\"d88a00\">8TB</font></li>\n<li>MySQL使用<font color=\"d88a00\">标准的SQL数据语言</font>形式</li>\n<li>MySQL可以允许运行于多个系统上，并支持多种语言，这些编程语言包括C、C++、Python、Java、Perl、PHP和Ruby等</li>\n</ul>\n<h3 id=\"3-2MySQL发展史重大事件\"><a href=\"#3-2MySQL发展史重大事件\" class=\"headerlink\" title=\"3.2MySQL发展史重大事件\"></a>3.2MySQL发展史重大事件</h3><p><img src=\"/post/2022/07/null/tu4.png\"></p>\n<h3 id=\"3-3-关于MySQL8-0\"><a href=\"#3-3-关于MySQL8-0\" class=\"headerlink\" title=\"3.3 关于MySQL8.0\"></a>3.3 关于MySQL8.0</h3><p><font color=\"d88a00\"><code>MySQL从5.7直接跳跃发布了8.0版本</code></font>，这可见是一个令人兴奋的里程碑版本。MySQL 8版本在功能上做了显著的改进与增强，开发者对MysQL的源代码进行了重构，最突出的一点是对MySQL Optimizer优化器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p>\n<h3 id=\"3-4-Why-choose-MySQL？\"><a href=\"#3-4-Why-choose-MySQL？\" class=\"headerlink\" title=\"3.4 Why choose MySQL？\"></a>3.4 Why choose MySQL？</h3><p><img src=\"/post/2022/07/null/tu5.png\"></p>\n<ol>\n<li>为什么如此多厂商要选用MySQL？原因主要有以下几点：</li>\n<li>开放源代码，使用成本低</li>\n<li>性能卓越，服务稳定</li>\n<li>软件体积小，使用简单，并且易于维护</li>\n<li>历史悠久，社区用户非常活跃，遇到问题可以寻求帮助</li>\n<li>许多互联网公司都在使用，经过了时间的验证</li>\n</ol>\n<h3 id=\"3-5-Oracle-vs-MySQL\"><a href=\"#3-5-Oracle-vs-MySQL\" class=\"headerlink\" title=\"3.5 Oracle vs MySQL\"></a>3.5 Oracle vs MySQL</h3><p>Oracle更适合大型跨国企业的使用，因为他们对费用不敏感，但是对性能要求以及安全性有更高的要求。</p>\n<p>MySQL由于其**<font color=red>体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库，尤其是开放源码这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库</font>**</p>\n<h2 id=\"4-RDBMS与-非RDBMS\"><a href=\"#4-RDBMS与-非RDBMS\" class=\"headerlink\" title=\"4.RDBMS与 非RDBMS\"></a>4.RDBMS与 非RDBMS</h2><p>从排名中我们能看出来，关系型数据库是DBMS的主流，其中使用最多的DBMS分别是Oracle、MySQL和SQL Server。这些都是关系型数据库（DBMS）</p>\n<h3 id=\"4-1-关系型数据库（RDBMS）\"><a href=\"#4-1-关系型数据库（RDBMS）\" class=\"headerlink\" title=\"4.1 关系型数据库（RDBMS）\"></a>4.1 关系型数据库（RDBMS）</h3><h4 id=\"4-1-1-实质\"><a href=\"#4-1-1-实质\" class=\"headerlink\" title=\"4.1.1 实质\"></a>4.1.1 实质</h4><ul>\n<li>这种类型的数据库是<font color=orange>最古老</font>的数据库类型，关系型数据库模型是吧复杂的数据结构归结为简单的<font color=orange>二元关系</font>（即二维表格形式）</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu6.png\"></p>\n<ul>\n<li>关系型数据库以<font color=orange>行(row)</font>和<font color=orange>列(column)</font>形式存储数据，以便于用户理解。这一系列的行和列被称为<font color=orange>表(table)</font>，一组表组成了一个<font color=orange>库(database)</font></li>\n<li>表与表之间的数据记录有关系(relationship)。现实世界中的各类实体以及实体之间的各种联系均用<font color=orange>关系模型</font>来表示。关系型数据库，就是建立在<font color=orange>关系模型</font>基础上的数据库</li>\n<li>SQL就是关系型数据库的查询语言。</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu8.png\"></p>\n<h4 id=\"4-1-2-优势\"><a href=\"#4-1-2-优势\" class=\"headerlink\" title=\"4.1.2 优势\"></a>4.1.2 优势</h4><ul>\n<li><p><strong>复杂查询</strong></p>\n<p>可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询</p>\n</li>\n<li><p><strong>事务支持</strong></p>\n<p>使得对于安全性能很高的数据访问要求得以实现</p>\n</li>\n</ul>\n<h3 id=\"4-2非关系型数据库（非RDBMS）\"><a href=\"#4-2非关系型数据库（非RDBMS）\" class=\"headerlink\" title=\"4.2非关系型数据库（非RDBMS）\"></a>4.2非关系型数据库（非RDBMS）</h3><h4 id=\"4-2-1-介绍\"><a href=\"#4-2-1-介绍\" class=\"headerlink\" title=\"4.2.1 介绍\"></a>4.2.1 介绍</h4><p><strong>非关系型数据库</strong>，可以看成传统关系型数据库功能的<font color=orange>轻量版本</font>，基于键值对存储数据，不需要经过SQL层的解析，<font color=orange>性能非常高</font>。同时，通过减少不常用的功能，进一步提高性能。</p>\n<p>目前基本上大部分主流的非关系型数据库都是免费的。</p>\n<h4 id=\"4-2-2-有哪些类型的非关系型数据库\"><a href=\"#4-2-2-有哪些类型的非关系型数据库\" class=\"headerlink\" title=\"4.2.2 有哪些类型的非关系型数据库\"></a>4.2.2 有哪些类型的非关系型数据库</h4><p>相较于SQL、NoSQL泛指非关系型数据库，包括了榜单上的简直型数据库、文档型数据库、搜索引擎和列存储等，除此以外还包括图形数据库，也只有用NoSQL才能将这些技术囊括进来</p>\n<p><strong>键值型数据库</strong></p>\n<p>键值型数据库通过Key-Value键值对的方式存储数据，其中Key和Value可以说简单的对象，也可以是复杂的对象。Key作为唯一的标识符。有点事查找速度块，在这方面明显优于关系型数据库，缺点是无法像关系型数据库一样使用条件过滤（比如WHERE），如果不知道去哪里查找数据，就需要遍历所有的键，会消耗大量的计算。</p>\n<p>键值型数据库经典的使用场景是作为<font color=orange>内存缓存</font>。*<font color=orange>Redis</font>*是最流行的键值型数据库。</p>\n<p><img src=\"/post/2022/07/null/tu9.png\"></p>\n<p><strong>文档型数据库</strong></p>\n<p>此类数据库可存放并获取文档，可以说XML、JSON等格式。在数据库中文档作为处理信息的基本单位，一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB是最流行的文档型数据库。此外还有CouchDB等。</p>\n<p><strong>搜索引擎数据库</strong></p>\n<p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才可以保证性能最优。核心原理是“倒排索引”</p>\n<p>典型产品：Solr、Elasticsearch、Splunk等</p>\n<p><strong>列式数据库</strong></p>\n<p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server等数据库都是采用的行式存储(Rowbased),而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的I&#x2F;O，适合于分布式文件系统，不足在于功能相对有限</p>\n<p>典型产品：HBase等。</p>\n<p><img src=\"/post/2022/07/null/tu10.png\"></p>\n<p><strong>图型数据库</strong></p>\n<p>图型数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图像数据库最典型的例子就是社交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关系问题</p>\n<p><img src=\"/post/2022/07/null/tu13.png\"></p>\n<h4 id=\"4-2-3-NoSQL的演变\"><a href=\"#4-2-3-NoSQL的演变\" class=\"headerlink\" title=\"4.2.3 NoSQL的演变\"></a>4.2.3 NoSQL的演变</h4><p>由于SQL一直称霸DBMS，因此许多人思考是否有一致数据库技术能远离SQL，于是NoSQL诞生了，但是随着发展却越来越离不开SQL。到目前为止NoSQL阵营中的DBMS都会有实现类似SQL的功能，下面是“NoSQL”这个名称在不同时期的诠释，从这些诠释的变化中可以看出<font color=orange>NoSQL功能的演变：</font></p>\n<p>1970：NoSQL&#x3D;We have no SQL</p>\n<p>1980： NoSQL&#x3D;Know SQL</p>\n<p>2000：NoSQL&#x3D;No SQL！</p>\n<p>2005：NoSQL&#x3D;Not only SQL</p>\n<p>2013：NoSQL&#x3D;No，SQL</p>\n<p>NoSQL对SQL做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据库功能，非关系型数据库的功能就足够使用了，这种情况下，使用<font color=orange>性能更高，成本更低</font>的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p>\n<h3 id=\"4-3-小结\"><a href=\"#4-3-小结\" class=\"headerlink\" title=\"4.3 小结\"></a>4.3 小结</h3><p>NoSQL的分类很多，即使如此，在DBMS排行中，还是SQL的比重更大，影响力前5的DBMS中有4个是关系型数据库，而排名前20的DBMS中也有12个是关系型数据库，索引，掌握SQL是非常必要的。</p>\n<h2 id=\"5-关系型数据库设计规则\"><a href=\"#5-关系型数据库设计规则\" class=\"headerlink\" title=\"5.关系型数据库设计规则\"></a>5.关系型数据库设计规则</h2><ul>\n<li>关系型数据库的典型数据结构就是<font color=orange>数据表</font>，这些数据表的组成都是结构化(Structured)的</li>\n<li>将数据放入到表中，表再放到库中</li>\n<li>一个数据库中可以有很多表，每个表都有一个名字，用来标识自己，表明具有唯一性</li>\n<li>表具有一些特征，这些特征定义了数据在表中如何存储，类似于Java和Python中“类”的设计</li>\n</ul>\n<h3 id=\"5-1-表、记录、字段\"><a href=\"#5-1-表、记录、字段\" class=\"headerlink\" title=\"5.1 表、记录、字段\"></a>5.1 表、记录、字段</h3><ul>\n<li>E-R(entity-relationship,实体-联系)模型中有三个主要的感念是：<font color=orange>实体集、属性、联系集</font></li>\n<li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列（column），也称为一个字段（field）</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu14.png\"></p>\n<pre class=\"line-numbers language-latex\" data-language=\"latex\"><code class=\"language-latex\">ORM思想（Object Relational Mapping）\n数据库中的一个表   &lt;---&gt; Java或Python中的一个类\n表中的一个数据    &lt;---&gt;  类中的一个对象（或实体）\n表中的一个列      &lt;---&gt;  类中的一个字段、属性（field）</code></pre>\n\n<h3 id=\"5-2-表的关联关系\"><a href=\"#5-2-表的关联关系\" class=\"headerlink\" title=\"5.2 表的关联关系\"></a>5.2 表的关联关系</h3><ul>\n<li>表与表之间的数据记录有关系（relationship）。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示</li>\n<li>四种：一对一关联，一对多关联、多对多关联、自我引用</li>\n</ul>\n<h4 id=\"5-2-1-一对一关联（one-to-one）\"><a href=\"#5-2-1-一对一关联（one-to-one）\" class=\"headerlink\" title=\"5.2.1 一对一关联（one-to-one）\"></a>5.2.1 一对一关联（one-to-one）</h4><ul>\n<li>在实际的开发中应用不多，因为一对一可以创建成一张表</li>\n<li>举例：设计<font color=orange>学生表</font>：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急联系人、…<ul>\n<li>拆为两个表：连个表的记录是一一对应关系</li>\n<li><font color=orange>基础信息表</font>（常用信息）：学号、姓名、手机号、班级、系别</li>\n<li><font color=orange>档案信息表</font>（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、…</li>\n</ul>\n</li>\n<li>两种建表原则：<ul>\n<li>外键唯一：主标的主键和从表的外键(唯一)，形成主外键关系，外键唯一。</li>\n<li>外键是主键：主标的主键和从表的主键、形成主外键关系</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu15.png\"></p>\n<h4 id=\"5-2-2-一对多关联（one-to-many）\"><a href=\"#5-2-2-一对多关联（one-to-many）\" class=\"headerlink\" title=\"5.2.2 一对多关联（one-to-many）\"></a>5.2.2 一对多关联（one-to-many）</h4><ul>\n<li>常见实例场景：<font color=orange>客户表和订单表，分类表和商品表、部门表和角色表</font>。</li>\n<li>举例：<ul>\n<li>员工表：编号、姓名、……、所属部门</li>\n<li>部门表：编号、名称、简介</li>\n</ul>\n</li>\n<li>一对多建表原则：在从表（多方）创建一个字段，字段作为外键指向主表（一方）的主键</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu16.png\"></p>\n<p><img src=\"/post/2022/07/null/tu17.png\"></p>\n<h4 id=\"5-2-3-多对多关联（many-to-many）\"><a href=\"#5-2-3-多对多关联（many-to-many）\" class=\"headerlink\" title=\"5.2.3 多对多关联（many-to-many）\"></a>5.2.3 多对多关联（many-to-many）</h4><p>要表示多对多关系，必须要创建第三个表，该表通常称为<font color=orange>链接表</font>，它将多对多关系划分为两个一对多关系。将这两个表的主键都插入到第三个表中。</p>\n<p><img src=\"/post/2022/07/null/tu18.png\"></p>\n<ul>\n<li><strong>举例1：学生-课程</strong><ul>\n<li><font color=orange>学生信息表</font>：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别……）</li>\n<li><font color=orange>课程信息表</font>：一行代表一个课程的信息（课程编号、授课老师、简介……）</li>\n<li><font color=orange>选课信息表</font>：一个学生可以选多门课、一门课可以被多个学生选择</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">学号\t\t课程编号\n 1\t\t  1001\n 2\t      1001\n 1        1002</code></pre>\n\n<ul>\n<li><strong>举例2：产品-订单</strong></li>\n</ul>\n<p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。</p>\n<ul>\n<li><font color=orange>产品表</font>：“产品”表中的每条记录表示一个产品</li>\n<li><font color=orange>订单表</font>：“订单”表中的每条记录表示一个订单</li>\n<li><font color=orange>订单明细表</font>：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中，一个订单可以与“产品”表中的多条记录对应，即包含多个产品</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu20.png\"></p>\n<ul>\n<li><strong>举例3：用户-角色</strong></li>\n<li>多对多关系建表原则：需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</li>\n</ul>\n<p><img src=\"/post/2022/07/null/tu21.png\"></p>\n<h4 id=\"5-2-4-自我引用（Self-reference）\"><a href=\"#5-2-4-自我引用（Self-reference）\" class=\"headerlink\" title=\"5.2.4 自我引用（Self reference）\"></a>5.2.4 自我引用（Self reference）</h4><p><img src=\"/post/2022/07/null/tu22.png\"></p>\n","feature":true,"text":"第01章_数据库概述 1.为什么要使用数据库 持久化(persistence):把数据保存在可掉电式存储设备中以供之后使用。大多数情况下，特别是企业级应用，数据持久化意味着将内存中的数据保存到硬盘上加以”固化“，而持久化的实现过程大多通过各种关系数据库来完成。 持久化的主要作用是...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"MySQL8","slug":"MySQL8","count":3,"path":"api/categories/MySQL8.json"}],"tags":[{"name":"database","slug":"database","count":3,"path":"api/tags/database.json"},{"name":"MySQL8","slug":"MySQL8","count":3,"path":"api/tags/MySQL8.json"},{"name":"基础篇","slug":"基础篇","count":3,"path":"api/tags/基础篇.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC01%E7%AB%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">第01章_数据库概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">1.为什么要使用数据库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">2.数据库与数据库管理系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">2.1 数据库的相关概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">2.2 数据库与数据库管理系统的关系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%8E%92%E5%90%8D%EF%BC%88DBMS%EF%BC%89\"><span class=\"toc-text\">2.3 常见的数据库管理系统排名（DBMS）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">2.4  常见数据库介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Oracle\"><span class=\"toc-text\">Oracle</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SQL-Server\"><span class=\"toc-text\">SQL Server</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DB2\"><span class=\"toc-text\">DB2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PostgreSQL\"><span class=\"toc-text\">PostgreSQL</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SyBase\"><span class=\"toc-text\">SyBase</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SQLite\"><span class=\"toc-text\">SQLite</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#informix\"><span class=\"toc-text\">informix</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-MySQL%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">3.MySQL介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">3.1概述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2MySQL%E5%8F%91%E5%B1%95%E5%8F%B2%E9%87%8D%E5%A4%A7%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">3.2MySQL发展史重大事件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-%E5%85%B3%E4%BA%8EMySQL8-0\"><span class=\"toc-text\">3.3 关于MySQL8.0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-Why-choose-MySQL%EF%BC%9F\"><span class=\"toc-text\">3.4 Why choose MySQL？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-Oracle-vs-MySQL\"><span class=\"toc-text\">3.5 Oracle vs MySQL</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-RDBMS%E4%B8%8E-%E9%9D%9ERDBMS\"><span class=\"toc-text\">4.RDBMS与 非RDBMS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88RDBMS%EF%BC%89\"><span class=\"toc-text\">4.1 关系型数据库（RDBMS）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-1-%E5%AE%9E%E8%B4%A8\"><span class=\"toc-text\">4.1.1 实质</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-1-2-%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">4.1.2 优势</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E9%9D%9ERDBMS%EF%BC%89\"><span class=\"toc-text\">4.2非关系型数据库（非RDBMS）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-1-%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">4.2.1 介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-2-%E6%9C%89%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E7%9A%84%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93\"><span class=\"toc-text\">4.2.2 有哪些类型的非关系型数据库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-2-3-NoSQL%E7%9A%84%E6%BC%94%E5%8F%98\"><span class=\"toc-text\">4.2.3 NoSQL的演变</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">4.3 小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E8%A7%84%E5%88%99\"><span class=\"toc-text\">5.关系型数据库设计规则</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E8%A1%A8%E3%80%81%E8%AE%B0%E5%BD%95%E3%80%81%E5%AD%97%E6%AE%B5\"><span class=\"toc-text\">5.1 表、记录、字段</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E8%A1%A8%E7%9A%84%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">5.2 表的关联关系</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-1-%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E8%81%94%EF%BC%88one-to-one%EF%BC%89\"><span class=\"toc-text\">5.2.1 一对一关联（one-to-one）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-2-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88one-to-many%EF%BC%89\"><span class=\"toc-text\">5.2.2 一对多关联（one-to-many）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-3-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E8%81%94%EF%BC%88many-to-many%EF%BC%89\"><span class=\"toc-text\">5.2.3 多对多关联（many-to-many）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-2-4-%E8%87%AA%E6%88%91%E5%BC%95%E7%94%A8%EF%BC%88Self-reference%EF%BC%89\"><span class=\"toc-text\">5.2.4 自我引用（Self reference）</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}},"mapped":true,"prev_post":{"title":"02_MySQL的环境搭建","uid":"fd77306b8e52681f5ddc632e21ce0385","slug":"MySQL8/基础篇/02_MySQL的环境搭建","date":"2022-07-23T08:55:11.000Z","updated":"2022-07-24T01:09:33.129Z","comments":true,"path":"api/articles/MySQL8/基础篇/02_MySQL的环境搭建.json","keywords":"Java study learn 学习","cover":null,"text":"第02章_MySQL的环境搭建 1.MySQL的卸载步骤1：停止MySQL服务在卸载之前，先停止MySQL8.0的服务，按键盘上的“Ctrl+Alt+” 步骤2：软件的卸载步骤3：残余文件的清理步骤4：清楚注册表（选做）步骤5：删除环境变量配置待续…… ","link":"","photos":[],"count_time":{"symbolsCount":128,"symbolsTime":"1 mins."},"categories":[{"name":"MySQL8","slug":"MySQL8","count":3,"path":"api/categories/MySQL8.json"}],"tags":[{"name":"database","slug":"database","count":3,"path":"api/tags/database.json"},{"name":"MySQL8","slug":"MySQL8","count":3,"path":"api/tags/MySQL8.json"},{"name":"基础篇","slug":"基础篇","count":3,"path":"api/tags/基础篇.json"},{"name":"环境搭建","slug":"环境搭建","count":1,"path":"api/tags/环境搭建.json"}],"author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}},"feature":true},"next_post":{"title":"数组","uid":"e16187d7a3c490f96b788338bdd79d24","slug":"JavaSE/数组","date":"2022-07-02T12:24:10.000Z","updated":"2022-07-11T07:50:26.162Z","comments":true,"path":"api/articles/JavaSE/数组.json","keywords":"Java study learn 学习","cover":[],"text":"数组A.声明数组首先必须声明数组变量，才能在程序中使用数组。 dataType[] arrayRefVar; &#x2F;&#x2F; 首选的方法 或 dataType arrayRefVar[]; &#x2F;&#x2F; 效果相同，但不是首选方法 B.创建数组Java 语言使...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"JavaSE","slug":"JavaSE","count":8,"path":"api/categories/JavaSE.json"}],"tags":[{"name":"Java","slug":"Java","count":8,"path":"api/tags/Java.json"},{"name":"基础","slug":"基础","count":3,"path":"api/tags/基础.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"}],"author":{"name":"星桜","slug":"blog-author","avatar":"/images/avatar.png","link":"/","description":"学习Java中","socials":{"github":"https://github.com/umrlll","twitter":"https://twitter.com/Smile_Amber234","stackoverflow":"","wechat":"","qq":"tencent://AddContact/?fromId=45&fromSubId=1&subcmd=all&uin=1414018493&website=www.oicqzone.com","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/24956413"}}}}}}